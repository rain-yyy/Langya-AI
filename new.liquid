<!doctype html>
<html class="js" lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="">
    <link rel="canonical" href="https://aib-test2.myshopify.com/pages/bulk-run-test-tr"><link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin><title>
      Bulk Run Test TR
 &ndash; aib-test2</title>

    

    

<meta property="og:site_name" content="aib-test2">
<meta property="og:url" content="https://aib-test2.myshopify.com/pages/bulk-run-test-tr">
<meta property="og:title" content="Bulk Run Test TR">
<meta property="og:type" content="website">
<meta property="og:description" content="aib-test2"><meta name="twitter:card" content="summary_large_image">
<meta name="twitter:title" content="Bulk Run Test TR">
<meta name="twitter:description" content="aib-test2">


    <script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/constants.js?v=132983761750457495441751857554" defer="defer"></script>
    <script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/pubsub.js?v=25310214064522200911751857555" defer="defer"></script>
    <script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/global.js?v=184345515105158409801751857554" defer="defer"></script>
    <script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/details-disclosure.js?v=13653116266235556501751857554" defer="defer"></script>
    <script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/details-modal.js?v=25581673532751508451751857554" defer="defer"></script>
    <script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/search-form.js?v=133129549252120666541751857555" defer="defer"></script><script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/animations.js?v=88693664871331136111751857553" defer="defer"></script><script>window.performance && window.performance.mark && window.performance.mark('shopify.content_for_header.start');</script><meta id="shopify-digital-wallet" name="shopify-digital-wallet" content="/66377809989/digital_wallets/dialog">
<script async="async" src="/checkouts/internal/preloads.js?locale=en-HK"></script>
<script id="shopify-features" type="application/json">{"accessToken":"ef3c5dc24099c6617aa690150e96889f","betas":["rich-media-storefront-analytics"],"domain":"aib-test2.myshopify.com","predictiveSearch":true,"shopId":66377809989,"locale":"en"}</script>
<script>var Shopify = Shopify || {};
Shopify.shop = "aib-test2.myshopify.com";
Shopify.locale = "en";
Shopify.currency = {"active":"HKD","rate":"1.0"};
Shopify.country = "HK";
Shopify.theme = {"name":"theme-export-aib-test2-myshopify-com-dawn-06j","id":138387521605,"schema_name":"Dawn","schema_version":"15.3.0","theme_store_id":null,"role":"main"};
Shopify.theme.handle = "null";
Shopify.theme.style = {"id":null,"handle":null};
Shopify.cdnHost = "aib-test2.myshopify.com/cdn";
Shopify.routes = Shopify.routes || {};
Shopify.routes.root = "/";</script>
<script type="module">!function(o){(o.Shopify=o.Shopify||{}).modules=!0}(window);</script>
<script>!function(o){function n(){var o=[];function n(){o.push(Array.prototype.slice.apply(arguments))}return n.q=o,n}var t=o.Shopify=o.Shopify||{};t.loadFeatures=n(),t.autoloadFeatures=n()}(window);</script>
<script id="shop-js-analytics" type="application/json">{"pageType":"page"}</script>
<script defer="defer" async="async" src="//aib-test2.myshopify.com/cdn/shopifycloud/shop-js/client.js" onload="window.Shopify.SignInWithShop?.initShopCartSync?.({&quot;fedCMEnabled&quot;:true,&quot;windoidEnabled&quot;:true});
"></script>
<script id="__st">var __st={"a":66377809989,"offset":-14400,"reqid":"ce736e38-830f-4a6a-804e-ed534a487131-1761143472","pageurl":"aib-test2.myshopify.com\/pages\/bulk-run-test-tr","s":"pages-107903090757","u":"edc6b87b1b4f","cid":7727333081157,"p":"page","rtyp":"page","rid":107903090757};</script>
<script>window.ShopifyPaypalV4VisibilityTracking = true;</script>
<script id="captcha-bootstrap">!function(){'use strict';const t='contact',e='account',n='new_comment',o=[[t,t],['blogs',n],['comments',n],[t,'customer']],c=[[e,'customer_login'],[e,'guest_login'],[e,'recover_customer_password'],[e,'create_customer']],r=t=>t.map((([t,e])=>`form[action*='/${t}']:not([data-nocaptcha='true']) input[name='form_type'][value='${e}']`)).join(','),a=t=>()=>t?[...document.querySelectorAll(t)].map((t=>t.form)):[];function s(){const t=[...o],e=r(t);return a(e)}const i='password',u='form_key',d=['recaptcha-v3-token','g-recaptcha-response','h-captcha-response',i],f=()=>{try{return window.sessionStorage}catch{return}},m='__shopify_v',_=t=>t.elements[u];function p(t,e,n=!1){try{const o=window.sessionStorage,c=JSON.parse(o.getItem(e)),{data:r}=function(t){const{data:e,action:n}=t;return t[m]||n?{data:e,action:n}:{data:t,action:n}}(c);for(const[e,n]of Object.entries(r))t.elements[e]&&(t.elements[e].value=n);n&&o.removeItem(e)}catch(o){console.error('form repopulation failed',{error:o})}}const l='form_type',E='cptcha';function T(t){t.dataset[E]=!0}const w=window,h=w.document,L='Shopify',v='ce_forms',y='captcha';let A=!1;((t,e)=>{const n=(g='f06e6c50-85a8-45c8-87d0-21a2b65856fe',I='https://cdn.shopify.com/shopifycloud/storefront-forms-hcaptcha/ce_storefront_forms_captcha_hcaptcha.v1.5.2.iife.js',D={infoText:'Protected by hCaptcha',privacyText:'Privacy',termsText:'Terms'},(t,e,n)=>{const o=w[L][v],c=o.bindForm;if(c)return c(t,g,e,D).then(n);var r;o.q.push([[t,g,e,D],n]),r=I,A||(h.body.append(Object.assign(h.createElement('script'),{id:'captcha-provider',async:!0,src:r})),A=!0)});var g,I,D;w[L]=w[L]||{},w[L][v]=w[L][v]||{},w[L][v].q=[],w[L][y]=w[L][y]||{},w[L][y].protect=function(t,e){n(t,void 0,e),T(t)},Object.freeze(w[L][y]),function(t,e,n,w,h,L){const[v,y,A,g]=function(t,e,n){const i=e?o:[],u=t?c:[],d=[...i,...u],f=r(d),m=r(i),_=r(d.filter((([t,e])=>n.includes(e))));return[a(f),a(m),a(_),s()]}(w,h,L),I=t=>{const e=t.target;return e instanceof HTMLFormElement?e:e&&e.form},D=t=>v().includes(t);t.addEventListener('submit',(t=>{const e=I(t);if(!e)return;const n=D(e)&&!e.dataset.hcaptchaBound&&!e.dataset.recaptchaBound,o=_(e),c=g().includes(e)&&(!o||!o.value);(n||c)&&t.preventDefault(),c&&!n&&(function(t){try{if(!f())return;!function(t){const e=f();if(!e)return;const n=_(t);if(!n)return;const o=n.value;o&&e.removeItem(o)}(t);const e=Array.from(Array(32),(()=>Math.random().toString(36)[2])).join('');!function(t,e){_(t)||t.append(Object.assign(document.createElement('input'),{type:'hidden',name:u})),t.elements[u].value=e}(t,e),function(t,e){const n=f();if(!n)return;const o=[...t.querySelectorAll(`input[type='${i}']`)].map((({name:t})=>t)),c=[...d,...o],r={};for(const[a,s]of new FormData(t).entries())c.includes(a)||(r[a]=s);n.setItem(e,JSON.stringify({[m]:1,action:t.action,data:r}))}(t,e)}catch(e){console.error('failed to persist form',e)}}(e),e.submit())}));const S=(t,e)=>{t&&!t.dataset[E]&&(n(t,e.some((e=>e===t))),T(t))};for(const o of['focusin','change'])t.addEventListener(o,(t=>{const e=I(t);D(e)&&S(e,y())}));const B=e.get('form_key'),M=e.get(l),P=B&&M;t.addEventListener('DOMContentLoaded',(()=>{const t=y();if(P)for(const e of t)e.elements[l].value===M&&p(e,B);[...new Set([...A(),...v().filter((t=>'true'===t.dataset.shopifyCaptcha))])].forEach((e=>S(e,t)))}))}(h,new URLSearchParams(w.location.search),n,t,e,['guest_login'])})(!0,!0)}();</script>
<script integrity="sha256-52AcMU7V7pcBOXWImdc/TAGTFKeNjmkeM1Pvks/DTgc=" data-source-attribution="shopify.loadfeatures" defer="defer" src="//aib-test2.myshopify.com/cdn/shopifycloud/storefront/assets/storefront/load_feature-81c60534.js" crossorigin="anonymous"></script>
<script data-source-attribution="shopify.dynamic_checkout.dynamic.init">var Shopify=Shopify||{};Shopify.PaymentButton=Shopify.PaymentButton||{isStorefrontPortableWallets:!0,init:function(){window.Shopify.PaymentButton.init=function(){};var t=document.createElement("script");t.src="https://aib-test2.myshopify.com/cdn/shopifycloud/portable-wallets/latest/portable-wallets.en.js",t.type="module",document.head.appendChild(t)}};
</script>
<script data-source-attribution="shopify.dynamic_checkout.buyer_consent">
  function portableWalletsHideBuyerConsent(e){var t=document.getElementById("shopify-buyer-consent"),n=document.getElementById("shopify-subscription-policy-button");t&&n&&(t.classList.add("hidden"),t.setAttribute("aria-hidden","true"),n.removeEventListener("click",e))}function portableWalletsShowBuyerConsent(e){var t=document.getElementById("shopify-buyer-consent"),n=document.getElementById("shopify-subscription-policy-button");t&&n&&(t.classList.remove("hidden"),t.removeAttribute("aria-hidden"),n.addEventListener("click",e))}window.Shopify?.PaymentButton&&(window.Shopify.PaymentButton.hideBuyerConsent=portableWalletsHideBuyerConsent,window.Shopify.PaymentButton.showBuyerConsent=portableWalletsShowBuyerConsent);
</script>
<script data-source-attribution="shopify.dynamic_checkout.cart.bootstrap">document.addEventListener("DOMContentLoaded",(function(){function t(){return document.querySelector("shopify-accelerated-checkout-cart, shopify-accelerated-checkout")}if(t())Shopify.PaymentButton.init();else{new MutationObserver((function(e,n){t()&&(Shopify.PaymentButton.init(),n.disconnect())})).observe(document.body,{childList:!0,subtree:!0})}}));
</script>
<script type='text/javascript' defer='defer' src='https://cdn.shopify.com/shopifycloud/preview-bar/preview-bar-modules.js'></script>
<script id="OnlineStorePreviewBarNextData" type="application/json">{"activeMarketCountries":[{"code":"HK","name":"Hong Kong SAR"}],"allCountries":[{"code":"AF","name":"Afghanistan"},{"code":"AX","name":"Åland Islands"},{"code":"AL","name":"Albania"},{"code":"DZ","name":"Algeria"},{"code":"AD","name":"Andorra"},{"code":"AO","name":"Angola"},{"code":"AI","name":"Anguilla"},{"code":"AG","name":"Antigua \u0026 Barbuda"},{"code":"AR","name":"Argentina"},{"code":"AM","name":"Armenia"},{"code":"AW","name":"Aruba"},{"code":"AC","name":"Ascension Island"},{"code":"AU","name":"Australia"},{"code":"AT","name":"Austria"},{"code":"AZ","name":"Azerbaijan"},{"code":"BS","name":"Bahamas"},{"code":"BH","name":"Bahrain"},{"code":"BD","name":"Bangladesh"},{"code":"BB","name":"Barbados"},{"code":"BY","name":"Belarus"},{"code":"BE","name":"Belgium"},{"code":"BZ","name":"Belize"},{"code":"BJ","name":"Benin"},{"code":"BM","name":"Bermuda"},{"code":"BT","name":"Bhutan"},{"code":"BO","name":"Bolivia"},{"code":"BA","name":"Bosnia \u0026 Herzegovina"},{"code":"BW","name":"Botswana"},{"code":"BR","name":"Brazil"},{"code":"IO","name":"British Indian Ocean Territory"},{"code":"VG","name":"British Virgin Islands"},{"code":"BN","name":"Brunei"},{"code":"BG","name":"Bulgaria"},{"code":"BF","name":"Burkina Faso"},{"code":"BI","name":"Burundi"},{"code":"KH","name":"Cambodia"},{"code":"CM","name":"Cameroon"},{"code":"CA","name":"Canada"},{"code":"CV","name":"Cape Verde"},{"code":"BQ","name":"Caribbean Netherlands"},{"code":"KY","name":"Cayman Islands"},{"code":"CF","name":"Central African Republic"},{"code":"TD","name":"Chad"},{"code":"CL","name":"Chile"},{"code":"CN","name":"China"},{"code":"CX","name":"Christmas Island"},{"code":"CC","name":"Cocos (Keeling) Islands"},{"code":"CO","name":"Colombia"},{"code":"KM","name":"Comoros"},{"code":"CG","name":"Congo - Brazzaville"},{"code":"CD","name":"Congo - Kinshasa"},{"code":"CK","name":"Cook Islands"},{"code":"CR","name":"Costa Rica"},{"code":"CI","name":"Côte d’Ivoire"},{"code":"HR","name":"Croatia"},{"code":"CW","name":"Curaçao"},{"code":"CY","name":"Cyprus"},{"code":"CZ","name":"Czechia"},{"code":"DK","name":"Denmark"},{"code":"DJ","name":"Djibouti"},{"code":"DM","name":"Dominica"},{"code":"DO","name":"Dominican Republic"},{"code":"EC","name":"Ecuador"},{"code":"EG","name":"Egypt"},{"code":"SV","name":"El Salvador"},{"code":"GQ","name":"Equatorial Guinea"},{"code":"ER","name":"Eritrea"},{"code":"EE","name":"Estonia"},{"code":"SZ","name":"Eswatini"},{"code":"ET","name":"Ethiopia"},{"code":"FK","name":"Falkland Islands"},{"code":"FO","name":"Faroe Islands"},{"code":"FJ","name":"Fiji"},{"code":"FI","name":"Finland"},{"code":"FR","name":"France"},{"code":"GF","name":"French Guiana"},{"code":"PF","name":"French Polynesia"},{"code":"TF","name":"French Southern Territories"},{"code":"GA","name":"Gabon"},{"code":"GM","name":"Gambia"},{"code":"GE","name":"Georgia"},{"code":"DE","name":"Germany"},{"code":"GH","name":"Ghana"},{"code":"GI","name":"Gibraltar"},{"code":"GR","name":"Greece"},{"code":"GL","name":"Greenland"},{"code":"GD","name":"Grenada"},{"code":"GP","name":"Guadeloupe"},{"code":"GT","name":"Guatemala"},{"code":"GG","name":"Guernsey"},{"code":"GN","name":"Guinea"},{"code":"GW","name":"Guinea-Bissau"},{"code":"GY","name":"Guyana"},{"code":"HT","name":"Haiti"},{"code":"HN","name":"Honduras"},{"code":"HK","name":"Hong Kong SAR"},{"code":"HU","name":"Hungary"},{"code":"IS","name":"Iceland"},{"code":"IN","name":"India"},{"code":"ID","name":"Indonesia"},{"code":"IQ","name":"Iraq"},{"code":"IE","name":"Ireland"},{"code":"IM","name":"Isle of Man"},{"code":"IL","name":"Israel"},{"code":"IT","name":"Italy"},{"code":"JM","name":"Jamaica"},{"code":"JP","name":"Japan"},{"code":"JE","name":"Jersey"},{"code":"JO","name":"Jordan"},{"code":"KZ","name":"Kazakhstan"},{"code":"KE","name":"Kenya"},{"code":"KI","name":"Kiribati"},{"code":"XK","name":"Kosovo"},{"code":"KW","name":"Kuwait"},{"code":"KG","name":"Kyrgyzstan"},{"code":"LA","name":"Laos"},{"code":"LV","name":"Latvia"},{"code":"LB","name":"Lebanon"},{"code":"LS","name":"Lesotho"},{"code":"LR","name":"Liberia"},{"code":"LY","name":"Libya"},{"code":"LI","name":"Liechtenstein"},{"code":"LT","name":"Lithuania"},{"code":"LU","name":"Luxembourg"},{"code":"MO","name":"Macao SAR"},{"code":"MG","name":"Madagascar"},{"code":"MW","name":"Malawi"},{"code":"MY","name":"Malaysia"},{"code":"MV","name":"Maldives"},{"code":"ML","name":"Mali"},{"code":"MT","name":"Malta"},{"code":"MQ","name":"Martinique"},{"code":"MR","name":"Mauritania"},{"code":"MU","name":"Mauritius"},{"code":"YT","name":"Mayotte"},{"code":"MX","name":"Mexico"},{"code":"MD","name":"Moldova"},{"code":"MC","name":"Monaco"},{"code":"MN","name":"Mongolia"},{"code":"ME","name":"Montenegro"},{"code":"MS","name":"Montserrat"},{"code":"MA","name":"Morocco"},{"code":"MZ","name":"Mozambique"},{"code":"MM","name":"Myanmar (Burma)"},{"code":"NA","name":"Namibia"},{"code":"NR","name":"Nauru"},{"code":"NP","name":"Nepal"},{"code":"NL","name":"Netherlands"},{"code":"NC","name":"New Caledonia"},{"code":"NZ","name":"New Zealand"},{"code":"NI","name":"Nicaragua"},{"code":"NE","name":"Niger"},{"code":"NG","name":"Nigeria"},{"code":"NU","name":"Niue"},{"code":"NF","name":"Norfolk Island"},{"code":"MK","name":"North Macedonia"},{"code":"NO","name":"Norway"},{"code":"OM","name":"Oman"},{"code":"PK","name":"Pakistan"},{"code":"PS","name":"Palestinian Territories"},{"code":"PA","name":"Panama"},{"code":"PG","name":"Papua New Guinea"},{"code":"PY","name":"Paraguay"},{"code":"PE","name":"Peru"},{"code":"PH","name":"Philippines"},{"code":"PN","name":"Pitcairn Islands"},{"code":"PL","name":"Poland"},{"code":"PT","name":"Portugal"},{"code":"QA","name":"Qatar"},{"code":"RE","name":"Réunion"},{"code":"RO","name":"Romania"},{"code":"RU","name":"Russia"},{"code":"RW","name":"Rwanda"},{"code":"WS","name":"Samoa"},{"code":"SM","name":"San Marino"},{"code":"ST","name":"São Tomé \u0026 Príncipe"},{"code":"SA","name":"Saudi Arabia"},{"code":"SN","name":"Senegal"},{"code":"RS","name":"Serbia"},{"code":"SC","name":"Seychelles"},{"code":"SL","name":"Sierra Leone"},{"code":"SG","name":"Singapore"},{"code":"SX","name":"Sint Maarten"},{"code":"SK","name":"Slovakia"},{"code":"SI","name":"Slovenia"},{"code":"SB","name":"Solomon Islands"},{"code":"SO","name":"Somalia"},{"code":"ZA","name":"South Africa"},{"code":"GS","name":"South Georgia \u0026 South Sandwich Islands"},{"code":"KR","name":"South Korea"},{"code":"SS","name":"South Sudan"},{"code":"ES","name":"Spain"},{"code":"LK","name":"Sri Lanka"},{"code":"BL","name":"St. Barthélemy"},{"code":"SH","name":"St. Helena"},{"code":"KN","name":"St. Kitts \u0026 Nevis"},{"code":"LC","name":"St. Lucia"},{"code":"MF","name":"St. Martin"},{"code":"PM","name":"St. Pierre \u0026 Miquelon"},{"code":"VC","name":"St. Vincent \u0026 Grenadines"},{"code":"SD","name":"Sudan"},{"code":"SR","name":"Suriname"},{"code":"SJ","name":"Svalbard \u0026 Jan Mayen"},{"code":"SE","name":"Sweden"},{"code":"CH","name":"Switzerland"},{"code":"TW","name":"Taiwan"},{"code":"TJ","name":"Tajikistan"},{"code":"TZ","name":"Tanzania"},{"code":"TH","name":"Thailand"},{"code":"TL","name":"Timor-Leste"},{"code":"TG","name":"Togo"},{"code":"TK","name":"Tokelau"},{"code":"TO","name":"Tonga"},{"code":"TT","name":"Trinidad \u0026 Tobago"},{"code":"TA","name":"Tristan da Cunha"},{"code":"TN","name":"Tunisia"},{"code":"TR","name":"Türkiye"},{"code":"TM","name":"Turkmenistan"},{"code":"TC","name":"Turks \u0026 Caicos Islands"},{"code":"TV","name":"Tuvalu"},{"code":"UM","name":"U.S. Outlying Islands"},{"code":"UG","name":"Uganda"},{"code":"UA","name":"Ukraine"},{"code":"AE","name":"United Arab Emirates"},{"code":"GB","name":"United Kingdom"},{"code":"US","name":"United States"},{"code":"UY","name":"Uruguay"},{"code":"UZ","name":"Uzbekistan"},{"code":"VU","name":"Vanuatu"},{"code":"VA","name":"Vatican City"},{"code":"VE","name":"Venezuela"},{"code":"VN","name":"Vietnam"},{"code":"WF","name":"Wallis \u0026 Futuna"},{"code":"EH","name":"Western Sahara"},{"code":"YE","name":"Yemen"},{"code":"ZM","name":"Zambia"},{"code":"ZW","name":"Zimbabwe"}],"fallbackCountryCode":"HK","locales":[{"locale":"en","name":"English","published":true,"url":"\/"}],"currentLocaleRootUrl":"\/","previewAttributes":{"showCompanyLocations":true,"showLanguages":true,"showMarkets":true,"userLocale":"en"},"shop":{"id":66377809989,"isPasswordEnabled":true,"b2bRestricted":false,"primaryLocale":"en","domain":"aib-test2.myshopify.com"},"theme":{"id":138387521605,"isDraft":false,"name":"theme-export-aib-test2-myshopify-com-dawn-06j","sharingAccessToken":null},"pageSpecificData":{"resource":{"type":"PAGE","id":107903090757,"url":"https:\/\/aib-test2.myshopify.com\/admin\/pages\/107903090757","title":"Bulk Run Test TR","published":true}},"localizationData":{"currentLocale":"en","currentMarket":{"primary":false,"supportsShopPrimaryLocale":true,"marketId":26084769861,"marketHandle":"hk"}},"customerTags":{},"betas":{"10c98b12":true,"cc7bff1c":false}}</script><script id="sections-script" data-sections="header" defer="defer" src="//aib-test2.myshopify.com/cdn/shop/t/2/compiled_assets/scripts.js?1739"></script>
<script>window.performance && window.performance.mark && window.performance.mark('shopify.content_for_header.end');</script>


    <style data-shopify>
      @font-face {
  font-family: Assistant;
  font-weight: 400;
  font-style: normal;
  font-display: swap;
  src: url("//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n4.9120912a469cad1cc292572851508ca49d12e768.woff2?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=31565b056e82285d0b5a3b8c8c4d31f9123362f9dda424dfc08edd026fe1da84") format("woff2"),
       url("//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n4.6e9875ce64e0fefcd3f4446b7ec9036b3ddd2985.woff?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=45b6b28b250cae35edd2af6a5d1eb874b2f00f8c5bbcd403e6b0497a81d5e2a9") format("woff");
}

      @font-face {
  font-family: Assistant;
  font-weight: 700;
  font-style: normal;
  font-display: swap;
  src: url("//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n7.bf44452348ec8b8efa3aa3068825305886b1c83c.woff2?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=00b63845aa258db11500cbc7ce7913fde400f8bc7337d11f6f461f4d738061ad") format("woff2"),
       url("//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n7.0c887fee83f6b3bda822f1150b912c72da0f7b64.woff?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=3379298d38fe85ce066bea0d902ab16a5acbdd5d2f250a68b82a57ebcdb237d9") format("woff");
}

      
      
      @font-face {
  font-family: Assistant;
  font-weight: 400;
  font-style: normal;
  font-display: swap;
  src: url("//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n4.9120912a469cad1cc292572851508ca49d12e768.woff2?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=31565b056e82285d0b5a3b8c8c4d31f9123362f9dda424dfc08edd026fe1da84") format("woff2"),
       url("//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n4.6e9875ce64e0fefcd3f4446b7ec9036b3ddd2985.woff?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=45b6b28b250cae35edd2af6a5d1eb874b2f00f8c5bbcd403e6b0497a81d5e2a9") format("woff");
}


      
        :root,
        .color-scheme-1 {
          --color-background: 255,255,255;
        
          --gradient-background: #FFFFFF;
        

        

        --color-foreground: 18,18,18;
        --color-background-contrast: 191,191,191;
        --color-shadow: 18,18,18;
        --color-button: 18,18,18;
        --color-button-text: 255,255,255;
        --color-secondary-button: 255,255,255;
        --color-secondary-button-text: 18,18,18;
        --color-link: 18,18,18;
        --color-badge-foreground: 18,18,18;
        --color-badge-background: 255,255,255;
        --color-badge-border: 18,18,18;
        --payment-terms-background-color: rgb(255 255 255);
      }
      
        
        .color-scheme-2 {
          --color-background: 243,243,243;
        
          --gradient-background: #F3F3F3;
        

        

        --color-foreground: 18,18,18;
        --color-background-contrast: 179,179,179;
        --color-shadow: 18,18,18;
        --color-button: 18,18,18;
        --color-button-text: 243,243,243;
        --color-secondary-button: 243,243,243;
        --color-secondary-button-text: 18,18,18;
        --color-link: 18,18,18;
        --color-badge-foreground: 18,18,18;
        --color-badge-background: 243,243,243;
        --color-badge-border: 18,18,18;
        --payment-terms-background-color: rgb(243 243 243);
      }
      
        
        .color-scheme-3 {
          --color-background: 36,40,51;
        
          --gradient-background: #242833;
        

        

        --color-foreground: 255,255,255;
        --color-background-contrast: 47,52,66;
        --color-shadow: 18,18,18;
        --color-button: 255,255,255;
        --color-button-text: 0,0,0;
        --color-secondary-button: 36,40,51;
        --color-secondary-button-text: 255,255,255;
        --color-link: 255,255,255;
        --color-badge-foreground: 255,255,255;
        --color-badge-background: 36,40,51;
        --color-badge-border: 255,255,255;
        --payment-terms-background-color: rgb(36 40 51);
      }
      
        
        .color-scheme-4 {
          --color-background: 18,18,18;
        
          --gradient-background: #121212;
        

        

        --color-foreground: 255,255,255;
        --color-background-contrast: 146,146,146;
        --color-shadow: 18,18,18;
        --color-button: 255,255,255;
        --color-button-text: 18,18,18;
        --color-secondary-button: 18,18,18;
        --color-secondary-button-text: 255,255,255;
        --color-link: 255,255,255;
        --color-badge-foreground: 255,255,255;
        --color-badge-background: 18,18,18;
        --color-badge-border: 255,255,255;
        --payment-terms-background-color: rgb(18 18 18);
      }
      
        
        .color-scheme-5 {
          --color-background: 51,79,180;
        
          --gradient-background: #334FB4;
        

        

        --color-foreground: 255,255,255;
        --color-background-contrast: 23,35,81;
        --color-shadow: 18,18,18;
        --color-button: 255,255,255;
        --color-button-text: 51,79,180;
        --color-secondary-button: 51,79,180;
        --color-secondary-button-text: 255,255,255;
        --color-link: 255,255,255;
        --color-badge-foreground: 255,255,255;
        --color-badge-background: 51,79,180;
        --color-badge-border: 255,255,255;
        --payment-terms-background-color: rgb(51 79 180);
      }
      

      body, .color-scheme-1, .color-scheme-2, .color-scheme-3, .color-scheme-4, .color-scheme-5 {
        color: rgba(var(--color-foreground), 0.75);
        background-color: rgb(var(--color-background));
      }

      :root {
        --font-body-family: Assistant, sans-serif;
        --font-body-style: normal;
        --font-body-weight: 400;
        --font-body-weight-bold: 700;

        --font-heading-family: Assistant, sans-serif;
        --font-heading-style: normal;
        --font-heading-weight: 400;

        --font-body-scale: 1.0;
        --font-heading-scale: 1.0;

        --media-padding: px;
        --media-border-opacity: 0.05;
        --media-border-width: 1px;
        --media-radius: 0px;
        --media-shadow-opacity: 0.0;
        --media-shadow-horizontal-offset: 0px;
        --media-shadow-vertical-offset: 4px;
        --media-shadow-blur-radius: 5px;
        --media-shadow-visible: 0;

        --page-width: 120rem;
        --page-width-margin: 0rem;

        --product-card-image-padding: 0.0rem;
        --product-card-corner-radius: 0.0rem;
        --product-card-text-alignment: left;
        --product-card-border-width: 0.0rem;
        --product-card-border-opacity: 0.1;
        --product-card-shadow-opacity: 0.0;
        --product-card-shadow-visible: 0;
        --product-card-shadow-horizontal-offset: 0.0rem;
        --product-card-shadow-vertical-offset: 0.4rem;
        --product-card-shadow-blur-radius: 0.5rem;

        --collection-card-image-padding: 0.0rem;
        --collection-card-corner-radius: 0.0rem;
        --collection-card-text-alignment: left;
        --collection-card-border-width: 0.0rem;
        --collection-card-border-opacity: 0.1;
        --collection-card-shadow-opacity: 0.0;
        --collection-card-shadow-visible: 0;
        --collection-card-shadow-horizontal-offset: 0.0rem;
        --collection-card-shadow-vertical-offset: 0.4rem;
        --collection-card-shadow-blur-radius: 0.5rem;

        --blog-card-image-padding: 0.0rem;
        --blog-card-corner-radius: 0.0rem;
        --blog-card-text-alignment: left;
        --blog-card-border-width: 0.0rem;
        --blog-card-border-opacity: 0.1;
        --blog-card-shadow-opacity: 0.0;
        --blog-card-shadow-visible: 0;
        --blog-card-shadow-horizontal-offset: 0.0rem;
        --blog-card-shadow-vertical-offset: 0.4rem;
        --blog-card-shadow-blur-radius: 0.5rem;

        --badge-corner-radius: 4.0rem;

        --popup-border-width: 1px;
        --popup-border-opacity: 0.1;
        --popup-corner-radius: 0px;
        --popup-shadow-opacity: 0.05;
        --popup-shadow-horizontal-offset: 0px;
        --popup-shadow-vertical-offset: 4px;
        --popup-shadow-blur-radius: 5px;

        --drawer-border-width: 1px;
        --drawer-border-opacity: 0.1;
        --drawer-shadow-opacity: 0.0;
        --drawer-shadow-horizontal-offset: 0px;
        --drawer-shadow-vertical-offset: 4px;
        --drawer-shadow-blur-radius: 5px;

        --spacing-sections-desktop: 0px;
        --spacing-sections-mobile: 0px;

        --grid-desktop-vertical-spacing: 8px;
        --grid-desktop-horizontal-spacing: 8px;
        --grid-mobile-vertical-spacing: 4px;
        --grid-mobile-horizontal-spacing: 4px;

        --text-boxes-border-opacity: 0.1;
        --text-boxes-border-width: 0px;
        --text-boxes-radius: 0px;
        --text-boxes-shadow-opacity: 0.0;
        --text-boxes-shadow-visible: 0;
        --text-boxes-shadow-horizontal-offset: 0px;
        --text-boxes-shadow-vertical-offset: 4px;
        --text-boxes-shadow-blur-radius: 5px;

        --buttons-radius: 0px;
        --buttons-radius-outset: 0px;
        --buttons-border-width: 1px;
        --buttons-border-opacity: 1.0;
        --buttons-shadow-opacity: 0.0;
        --buttons-shadow-visible: 0;
        --buttons-shadow-horizontal-offset: 0px;
        --buttons-shadow-vertical-offset: 4px;
        --buttons-shadow-blur-radius: 5px;
        --buttons-border-offset: 0px;

        --inputs-radius: 0px;
        --inputs-border-width: 1px;
        --inputs-border-opacity: 0.55;
        --inputs-shadow-opacity: 0.0;
        --inputs-shadow-horizontal-offset: 0px;
        --inputs-margin-offset: 0px;
        --inputs-shadow-vertical-offset: 4px;
        --inputs-shadow-blur-radius: 5px;
        --inputs-radius-outset: 0px;

        --variant-pills-radius: 40px;
        --variant-pills-border-width: 1px;
        --variant-pills-border-opacity: 0.55;
        --variant-pills-shadow-opacity: 0.0;
        --variant-pills-shadow-horizontal-offset: 0px;
        --variant-pills-shadow-vertical-offset: 4px;
        --variant-pills-shadow-blur-radius: 5px;
      }

      *,
      *::before,
      *::after {
        box-sizing: inherit;
      }

      html {
        box-sizing: border-box;
        font-size: calc(var(--font-body-scale) * 62.5%);
        height: 100%;
      }

      body {
        display: grid;
        grid-template-rows: auto auto 1fr auto;
        grid-template-columns: 100%;
        min-height: 100%;
        margin: 0;
        font-size: 1.5rem;
        letter-spacing: 0.06rem;
        line-height: calc(1 + 0.8 / var(--font-body-scale));
        font-family: var(--font-body-family);
        font-style: var(--font-body-style);
        font-weight: var(--font-body-weight);
      }

      @media screen and (min-width: 750px) {
        body {
          font-size: 1.6rem;
        }
      }
    </style>

    <link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/base.css?v=159841507637079171801751857553" rel="stylesheet" type="text/css" media="all" />
    <link rel="stylesheet" href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-cart-items.css?v=123238115697927560811751857553" media="print" onload="this.media='all'">
      <link rel="preload" as="font" href="//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n4.9120912a469cad1cc292572851508ca49d12e768.woff2?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=31565b056e82285d0b5a3b8c8c4d31f9123362f9dda424dfc08edd026fe1da84" type="font/woff2" crossorigin>
      

      <link rel="preload" as="font" href="//aib-test2.myshopify.com/cdn/fonts/assistant/assistant_n4.9120912a469cad1cc292572851508ca49d12e768.woff2?h1=YWliLXRlc3QyLmFjY291bnQubXlzaG9waWZ5LmNvbQ&hmac=31565b056e82285d0b5a3b8c8c4d31f9123362f9dda424dfc08edd026fe1da84" type="font/woff2" crossorigin>
      
<link
        rel="stylesheet"
        href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-predictive-search.css?v=118923337488134913561751857554"
        media="print"
        onload="this.media='all'"
      ><script>
      if (Shopify.designMode) {
        document.documentElement.classList.add('shopify-design-mode');
      }
    </script>
  <link href="https://monorail-edge.shopifysvc.com" rel="dns-prefetch">
<script>(function(){if ("sendBeacon" in navigator && "performance" in window) {try {var session_token_from_headers = performance.getEntriesByType('navigation')[0].serverTiming.find(x => x.name == '_s').description;} catch {var session_token_from_headers = undefined;}var session_cookie_matches = document.cookie.match(/_shopify_s=([^;]*)/);var session_token_from_cookie = session_cookie_matches && session_cookie_matches.length === 2 ? session_cookie_matches[1] : "";var session_token = session_token_from_headers || session_token_from_cookie || "";function handle_abandonment_event(e) {var entries = performance.getEntries().filter(function(entry) {return /monorail-edge.shopifysvc.com/.test(entry.name);});if (!window.abandonment_tracked && entries.length === 0) {window.abandonment_tracked = true;var currentMs = Date.now();var navigation_start = performance.timing.navigationStart;var payload = {shop_id: 66377809989,url: window.location.href,navigation_start,duration: currentMs - navigation_start,session_token,page_type: "page"};window.navigator.sendBeacon("https://monorail-edge.shopifysvc.com/v1/produce", JSON.stringify({schema_id: "online_store_buyer_site_abandonment/1.1",payload: payload,metadata: {event_created_at_ms: currentMs,event_sent_at_ms: currentMs}}));}}window.addEventListener('pagehide', handle_abandonment_event);}}());</script>
<script id="web-pixels-manager-setup">(function e(e,d,r,n,o){if(void 0===o&&(o={}),!Boolean(null===(a=null===(i=window.Shopify)||void 0===i?void 0:i.analytics)||void 0===a?void 0:a.replayQueue)){var i,a;window.Shopify=window.Shopify||{};var t=window.Shopify;t.analytics=t.analytics||{};var s=t.analytics;s.replayQueue=[],s.publish=function(e,d,r){return s.replayQueue.push([e,d,r]),!0};try{self.performance.mark("wpm:start")}catch(e){}var l=function(){var e={modern:/Edge?\/(1{2}[4-9]|1[2-9]\d|[2-9]\d{2}|\d{4,})\.\d+(\.\d+|)|Firefox\/(1{2}[4-9]|1[2-9]\d|[2-9]\d{2}|\d{4,})\.\d+(\.\d+|)|Chrom(ium|e)\/(9{2}|\d{3,})\.\d+(\.\d+|)|(Maci|X1{2}).+ Version\/(15\.\d+|(1[6-9]|[2-9]\d|\d{3,})\.\d+)([,.]\d+|)( \(\w+\)|)( Mobile\/\w+|) Safari\/|Chrome.+OPR\/(9{2}|\d{3,})\.\d+\.\d+|(CPU[ +]OS|iPhone[ +]OS|CPU[ +]iPhone|CPU IPhone OS|CPU iPad OS)[ +]+(15[._]\d+|(1[6-9]|[2-9]\d|\d{3,})[._]\d+)([._]\d+|)|Android:?[ /-](13[3-9]|1[4-9]\d|[2-9]\d{2}|\d{4,})(\.\d+|)(\.\d+|)|Android.+Firefox\/(13[5-9]|1[4-9]\d|[2-9]\d{2}|\d{4,})\.\d+(\.\d+|)|Android.+Chrom(ium|e)\/(13[3-9]|1[4-9]\d|[2-9]\d{2}|\d{4,})\.\d+(\.\d+|)|SamsungBrowser\/([2-9]\d|\d{3,})\.\d+/,legacy:/Edge?\/(1[6-9]|[2-9]\d|\d{3,})\.\d+(\.\d+|)|Firefox\/(5[4-9]|[6-9]\d|\d{3,})\.\d+(\.\d+|)|Chrom(ium|e)\/(5[1-9]|[6-9]\d|\d{3,})\.\d+(\.\d+|)([\d.]+$|.*Safari\/(?![\d.]+ Edge\/[\d.]+$))|(Maci|X1{2}).+ Version\/(10\.\d+|(1[1-9]|[2-9]\d|\d{3,})\.\d+)([,.]\d+|)( \(\w+\)|)( Mobile\/\w+|) Safari\/|Chrome.+OPR\/(3[89]|[4-9]\d|\d{3,})\.\d+\.\d+|(CPU[ +]OS|iPhone[ +]OS|CPU[ +]iPhone|CPU IPhone OS|CPU iPad OS)[ +]+(10[._]\d+|(1[1-9]|[2-9]\d|\d{3,})[._]\d+)([._]\d+|)|Android:?[ /-](13[3-9]|1[4-9]\d|[2-9]\d{2}|\d{4,})(\.\d+|)(\.\d+|)|Mobile Safari.+OPR\/([89]\d|\d{3,})\.\d+\.\d+|Android.+Firefox\/(13[5-9]|1[4-9]\d|[2-9]\d{2}|\d{4,})\.\d+(\.\d+|)|Android.+Chrom(ium|e)\/(13[3-9]|1[4-9]\d|[2-9]\d{2}|\d{4,})\.\d+(\.\d+|)|Android.+(UC? ?Browser|UCWEB|U3)[ /]?(15\.([5-9]|\d{2,})|(1[6-9]|[2-9]\d|\d{3,})\.\d+)\.\d+|SamsungBrowser\/(5\.\d+|([6-9]|\d{2,})\.\d+)|Android.+MQ{2}Browser\/(14(\.(9|\d{2,})|)|(1[5-9]|[2-9]\d|\d{3,})(\.\d+|))(\.\d+|)|K[Aa][Ii]OS\/(3\.\d+|([4-9]|\d{2,})\.\d+)(\.\d+|)/},d=e.modern,r=e.legacy,n=navigator.userAgent;return n.match(d)?"modern":n.match(r)?"legacy":"unknown"}(),u="modern"===l?"modern":"legacy",c=(null!=n?n:{modern:"",legacy:""})[u],f=function(e){return[e.baseUrl,"/wpm","/b",e.hashVersion,"modern"===e.buildTarget?"m":"l",".js"].join("")}({baseUrl:d,hashVersion:r,buildTarget:u}),m=function(e){var d=e.version,r=e.bundleTarget,n=e.surface,o=e.pageUrl,i=e.monorailEndpoint;return{emit:function(e){var a=e.status,t=e.errorMsg,s=(new Date).getTime(),l=JSON.stringify({metadata:{event_sent_at_ms:s},events:[{schema_id:"web_pixels_manager_load/3.1",payload:{version:d,bundle_target:r,page_url:o,status:a,surface:n,error_msg:t},metadata:{event_created_at_ms:s}}]});if(!i)return console&&console.warn&&console.warn("[Web Pixels Manager] No Monorail endpoint provided, skipping logging."),!1;try{return self.navigator.sendBeacon.bind(self.navigator)(i,l)}catch(e){}var u=new XMLHttpRequest;try{return u.open("POST",i,!0),u.setRequestHeader("Content-Type","text/plain"),u.send(l),!0}catch(e){return console&&console.warn&&console.warn("[Web Pixels Manager] Got an unhandled error while logging to Monorail."),!1}}}}({version:r,bundleTarget:l,surface:e.surface,pageUrl:self.location.href,monorailEndpoint:e.monorailEndpoint});try{o.browserTarget=l,function(e){var d=e.src,r=e.async,n=void 0===r||r,o=e.onload,i=e.onerror,a=e.sri,t=e.scriptDataAttributes,s=void 0===t?{}:t,l=document.createElement("script"),u=document.querySelector("head"),c=document.querySelector("body");if(l.async=n,l.src=d,a&&(l.integrity=a,l.crossOrigin="anonymous"),s)for(var f in s)if(Object.prototype.hasOwnProperty.call(s,f))try{l.dataset[f]=s[f]}catch(e){}if(o&&l.addEventListener("load",o),i&&l.addEventListener("error",i),u)u.appendChild(l);else{if(!c)throw new Error("Did not find a head or body element to append the script");c.appendChild(l)}}({src:f,async:!0,onload:function(){if(!function(){var e,d;return Boolean(null===(d=null===(e=window.Shopify)||void 0===e?void 0:e.analytics)||void 0===d?void 0:d.initialized)}()){var d=window.webPixelsManager.init(e)||void 0;if(d){var r=window.Shopify.analytics;r.replayQueue.forEach((function(e){var r=e[0],n=e[1],o=e[2];d.publishCustomEvent(r,n,o)})),r.replayQueue=[],r.publish=d.publishCustomEvent,r.visitor=d.visitor,r.initialized=!0}}},onerror:function(){return m.emit({status:"failed",errorMsg:"".concat(f," has failed to load")})},sri:function(e){var d=/^sha384-[A-Za-z0-9+/=]+$/;return"string"==typeof e&&d.test(e)}(c)?c:"",scriptDataAttributes:o}),m.emit({status:"loading"})}catch(e){m.emit({status:"failed",errorMsg:(null==e?void 0:e.message)||"Unknown error"})}}})({shopId: 66377809989,storefrontBaseUrl: "https://aib-test2.myshopify.com",extensionsBaseUrl: "https://extensions.shopifycdn.com/cdn/shopifycloud/web-pixels-manager",monorailEndpoint: "https://monorail-edge.shopifysvc.com/unstable/produce_batch",surface: "storefront-renderer",enabledBetaFlags: ["2dca8a86"],webPixelsConfigList: [{"id":"shopify-app-pixel","configuration":"{}","eventPayloadVersion":"v1","runtimeContext":"STRICT","scriptVersion":"0450","apiClientId":"shopify-pixel","type":"APP","privacyPurposes":["ANALYTICS","MARKETING"]},{"id":"shopify-custom-pixel","eventPayloadVersion":"v1","runtimeContext":"LAX","scriptVersion":"0450","apiClientId":"shopify-pixel","type":"CUSTOM","privacyPurposes":["ANALYTICS","MARKETING"]}],isMerchantRequest: false,initData: {"shop":{"name":"aib-test2","paymentSettings":{"currencyCode":"HKD"},"myshopifyDomain":"aib-test2.myshopify.com","countryCode":"HK","storefrontUrl":"https:\/\/aib-test2.myshopify.com"},"customer":{"id":"7727333081157","email":"tianruifan21@gmail.com","firstName":null,"lastName":null,"ordersCount":0,"phone":null},"cart":null,"checkout":null,"productVariants":[],"purchasingCompany":null},},"https://aib-test2.myshopify.com/cdn","98688ed7w4720d202p17656315m70f274df",{"modern":"","legacy":""},{"shopId":"66377809989","storefrontBaseUrl":"https:\/\/aib-test2.myshopify.com","extensionBaseUrl":"https:\/\/extensions.shopifycdn.com\/cdn\/shopifycloud\/web-pixels-manager","surface":"storefront-renderer","enabledBetaFlags":"[\"2dca8a86\"]","isMerchantRequest":"false","hashVersion":"98688ed7w4720d202p17656315m70f274df","publish":"custom","events":"[[\"page_viewed\",{}]]"});</script><script>
  window.ShopifyAnalytics = window.ShopifyAnalytics || {};
  window.ShopifyAnalytics.meta = window.ShopifyAnalytics.meta || {};
  window.ShopifyAnalytics.meta.currency = 'HKD';
  var meta = {"page":{"pageType":"page","customerId":7727333081157,"resourceType":"page","resourceId":107903090757}};
  for (var attr in meta) {
    window.ShopifyAnalytics.meta[attr] = meta[attr];
  }
</script>
<script class="analytics">
  (function () {
    var customDocumentWrite = function(content) {
      var jquery = null;

      if (window.jQuery) {
        jquery = window.jQuery;
      } else if (window.Checkout && window.Checkout.$) {
        jquery = window.Checkout.$;
      }

      if (jquery) {
        jquery('body').append(content);
      }
    };

    var hasLoggedConversion = function(token) {
      if (token) {
        return document.cookie.indexOf('loggedConversion=' + token) !== -1;
      }
      return false;
    }

    var setCookieIfConversion = function(token) {
      if (token) {
        var twoMonthsFromNow = new Date(Date.now());
        twoMonthsFromNow.setMonth(twoMonthsFromNow.getMonth() + 2);

        document.cookie = 'loggedConversion=' + token + '; expires=' + twoMonthsFromNow;
      }
    }

    var trekkie = window.ShopifyAnalytics.lib = window.trekkie = window.trekkie || [];
    if (trekkie.integrations) {
      return;
    }
    trekkie.methods = [
      'identify',
      'page',
      'ready',
      'track',
      'trackForm',
      'trackLink'
    ];
    trekkie.factory = function(method) {
      return function() {
        var args = Array.prototype.slice.call(arguments);
        args.unshift(method);
        trekkie.push(args);
        return trekkie;
      };
    };
    for (var i = 0; i < trekkie.methods.length; i++) {
      var key = trekkie.methods[i];
      trekkie[key] = trekkie.factory(key);
    }
    trekkie.load = function(config) {
      trekkie.config = config || {};
      trekkie.config.initialDocumentCookie = document.cookie;
      var first = document.getElementsByTagName('script')[0];
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.onerror = function(e) {
        var scriptFallback = document.createElement('script');
        scriptFallback.type = 'text/javascript';
        scriptFallback.onerror = function(error) {
                var Monorail = {
      produce: function produce(monorailDomain, schemaId, payload) {
        var currentMs = new Date().getTime();
        var event = {
          schema_id: schemaId,
          payload: payload,
          metadata: {
            event_created_at_ms: currentMs,
            event_sent_at_ms: currentMs
          }
        };
        return Monorail.sendRequest("https://" + monorailDomain + "/v1/produce", JSON.stringify(event));
      },
      sendRequest: function sendRequest(endpointUrl, payload) {
        // Try the sendBeacon API
        if (window && window.navigator && typeof window.navigator.sendBeacon === 'function' && typeof window.Blob === 'function' && !Monorail.isIos12()) {
          var blobData = new window.Blob([payload], {
            type: 'text/plain'
          });

          if (window.navigator.sendBeacon(endpointUrl, blobData)) {
            return true;
          } // sendBeacon was not successful

        } // XHR beacon

        var xhr = new XMLHttpRequest();

        try {
          xhr.open('POST', endpointUrl);
          xhr.setRequestHeader('Content-Type', 'text/plain');
          xhr.send(payload);
        } catch (e) {
          console.log(e);
        }

        return false;
      },
      isIos12: function isIos12() {
        return window.navigator.userAgent.lastIndexOf('iPhone; CPU iPhone OS 12_') !== -1 || window.navigator.userAgent.lastIndexOf('iPad; CPU OS 12_') !== -1;
      }
    };
    Monorail.produce('monorail-edge.shopifysvc.com',
      'trekkie_storefront_load_errors/1.1',
      {shop_id: 66377809989,
      theme_id: 138387521605,
      app_name: "storefront",
      context_url: window.location.href,
      source_url: "//aib-test2.myshopify.com/cdn/s/trekkie.storefront.fa5ed3681c2fc2a896d098bf1f3f0dad966320f4.min.js"});

        };
        scriptFallback.async = true;
        scriptFallback.src = '//aib-test2.myshopify.com/cdn/s/trekkie.storefront.fa5ed3681c2fc2a896d098bf1f3f0dad966320f4.min.js';
        first.parentNode.insertBefore(scriptFallback, first);
      };
      script.async = true;
      script.src = '//aib-test2.myshopify.com/cdn/s/trekkie.storefront.fa5ed3681c2fc2a896d098bf1f3f0dad966320f4.min.js';
      first.parentNode.insertBefore(script, first);
    };
    trekkie.load(
      {"Trekkie":{"appName":"storefront","development":false,"defaultAttributes":{"shopId":66377809989,"isMerchantRequest":true,"themeId":138387521605,"themeCityHash":"14829350827528777946","contentLanguage":"en","currency":"HKD","eventMetadataId":"1b03a0e1-b002-45d7-ba2b-3604ca1a3c86"},"isServerSideCookieWritingEnabled":true,"monorailRegion":"shop_domain","enabledBetaFlags":["f0df213a"]},"Session Attribution":{},"S2S":{"facebookCapiEnabled":false,"customerId":7727333081157,"source":"trekkie-storefront-renderer","apiClientId":580111}}
    );

    var loaded = false;
    trekkie.ready(function() {
      if (loaded) return;
      loaded = true;

      window.ShopifyAnalytics.lib = window.trekkie;

      var originalDocumentWrite = document.write;
      document.write = customDocumentWrite;
      try { window.ShopifyAnalytics.merchantGoogleAnalytics.call(this); } catch(error) {};
      document.write = originalDocumentWrite;

      window.ShopifyAnalytics.lib.page(null,{"pageType":"page","customerId":7727333081157,"resourceType":"page","resourceId":107903090757,"shopifyEmitted":true});

      var match = window.location.pathname.match(/checkouts\/(.+)\/(thank_you|post_purchase)/)
      var token = match? match[1]: undefined;
      if (!hasLoggedConversion(token)) {
        setCookieIfConversion(token);
        
      }
    });


        var eventsListenerScript = document.createElement('script');
        eventsListenerScript.async = true;
        eventsListenerScript.src = "//aib-test2.myshopify.com/cdn/shopifycloud/storefront/assets/shop_events_listener-abeef7a0.js";
        document.getElementsByTagName('head')[0].appendChild(eventsListenerScript);

})();</script>
<script
  defer
  src="https://aib-test2.myshopify.com/cdn/shopifycloud/perf-kit/shopify-perf-kit-2.0.17.min.js"
  data-application="storefront-renderer"
  data-shop-id="66377809989"
  data-render-region="gcp-us-east1"
  data-page-type="page"
  data-theme-instance-id="138387521605"
  data-theme-name="Dawn"
  data-theme-version="15.3.0"
  data-monorail-region="shop_domain"
  data-resource-timing-sampling-rate="10"
  data-shs="true"
  data-shs-beacon="true"
  data-shs-export-with-fetch="true"
  data-shs-logs-sample-rate="1"
></script>
</head>

  <body class="gradient">
    <a class="skip-to-content-link button visually-hidden" href="#MainContent">
      Skip to content
    </a><!-- BEGIN sections: header-group -->
<div id="shopify-section-sections--17671188021317__announcement-bar" class="shopify-section shopify-section-group-header-group announcement-bar-section"><link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-slideshow.css?v=17933591812325749411751857554" rel="stylesheet" type="text/css" media="all" />
<link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-slider.css?v=14039311878856620671751857554" rel="stylesheet" type="text/css" media="all" />


<div
  class="utility-bar color-scheme-1 gradient utility-bar--bottom-border"
>
  <div class="page-width utility-bar__grid"><div
        class="announcement-bar"
        role="region"
        aria-label="Announcement"
        
      ><p class="announcement-bar__message h5">
            <span>Welcome to our store</span></p></div><div class="localization-wrapper">
</div>
  </div>
</div>


</div><div id="shopify-section-sections--17671188021317__header" class="shopify-section shopify-section-group-header-group section-header"><link rel="stylesheet" href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-list-menu.css?v=151968516119678728991751857553" media="print" onload="this.media='all'">
<link rel="stylesheet" href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-search.css?v=165164710990765432851751857554" media="print" onload="this.media='all'">
<link rel="stylesheet" href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-menu-drawer.css?v=147478906057189667651751857553" media="print" onload="this.media='all'">
<link
  rel="stylesheet"
  href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-cart-notification.css?v=54116361853792938221751857553"
  media="print"
  onload="this.media='all'"
><link rel="stylesheet" href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-price.css?v=70172745017360139101751857554" media="print" onload="this.media='all'"><style>
  header-drawer {
    justify-self: start;
    margin-left: -1.2rem;
  }@media screen and (min-width: 990px) {
      header-drawer {
        display: none;
      }
    }.menu-drawer-container {
    display: flex;
  }

  .list-menu {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .list-menu--inline {
    display: inline-flex;
    flex-wrap: wrap;
  }

  summary.list-menu__item {
    padding-right: 2.7rem;
  }

  .list-menu__item {
    display: flex;
    align-items: center;
    line-height: calc(1 + 0.3 / var(--font-body-scale));
  }

  .list-menu__item--link {
    text-decoration: none;
    padding-bottom: 1rem;
    padding-top: 1rem;
    line-height: calc(1 + 0.8 / var(--font-body-scale));
  }

  @media screen and (min-width: 750px) {
    .list-menu__item--link {
      padding-bottom: 0.5rem;
      padding-top: 0.5rem;
    }
  }
</style><style data-shopify>.header {
    padding: 10px 3rem 10px 3rem;
  }

  .section-header {
    position: sticky; /* This is for fixing a Safari z-index issue. PR #2147 */
    margin-bottom: 0px;
  }

  @media screen and (min-width: 750px) {
    .section-header {
      margin-bottom: 0px;
    }
  }

  @media screen and (min-width: 990px) {
    .header {
      padding-top: 20px;
      padding-bottom: 20px;
    }
  }</style><script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/cart-notification.js?v=133508293167896966491751857553" defer="defer"></script>

<sticky-header
  
    data-sticky-type="on-scroll-up"
  
  class="header-wrapper color-scheme-1 gradient header-wrapper--border-bottom"
><header class="header header--middle-left header--mobile-center page-width header--has-menu header--has-account">

<header-drawer data-breakpoint="tablet">
  <details id="Details-menu-drawer-container" class="menu-drawer-container">
    <summary
      class="header__icon header__icon--menu header__icon--summary link focus-inset"
      aria-label="Menu"
    >
      <span><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-hamburger" viewBox="0 0 18 16"><path fill="currentColor" d="M1 .5a.5.5 0 1 0 0 1h15.71a.5.5 0 0 0 0-1zM.5 8a.5.5 0 0 1 .5-.5h15.71a.5.5 0 0 1 0 1H1A.5.5 0 0 1 .5 8m0 7a.5.5 0 0 1 .5-.5h15.71a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5"/></svg>
<svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-close" viewBox="0 0 18 17"><path fill="currentColor" d="M.865 15.978a.5.5 0 0 0 .707.707l7.433-7.431 7.579 7.282a.501.501 0 0 0 .846-.37.5.5 0 0 0-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 1 0-.707-.708L8.991 7.853 1.413.573a.5.5 0 1 0-.693.72l7.563 7.268z"/></svg>
</span>
    </summary>
    <div id="menu-drawer" class="gradient menu-drawer motion-reduce color-scheme-1">
      <div class="menu-drawer__inner-container">
        <div class="menu-drawer__navigation-container">
          <nav class="menu-drawer__navigation">
            <ul class="menu-drawer__menu has-submenu list-menu" role="list"><li><a
                      id="HeaderDrawer-home"
                      href="/"
                      class="menu-drawer__menu-item list-menu__item link link--text focus-inset"
                      
                    >
                      Home
                    </a></li><li><a
                      id="HeaderDrawer-catalog"
                      href="/collections/all"
                      class="menu-drawer__menu-item list-menu__item link link--text focus-inset"
                      
                    >
                      Catalog
                    </a></li><li><a
                      id="HeaderDrawer-contact"
                      href="/pages/contact"
                      class="menu-drawer__menu-item list-menu__item link link--text focus-inset"
                      
                    >
                      Contact
                    </a></li><li><details id="Details-menu-drawer-menu-item-4">
                      <summary
                        id="HeaderDrawer-ai-bots"
                        class="menu-drawer__menu-item list-menu__item link link--text focus-inset"
                      >
                        AI Bots
                        <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-arrow" viewBox="0 0 14 10"><path fill="currentColor" fill-rule="evenodd" d="M8.537.808a.5.5 0 0 1 .817-.162l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 1 1-.708-.708L11.793 5.5H1a.5.5 0 0 1 0-1h10.793L8.646 1.354a.5.5 0 0 1-.109-.546" clip-rule="evenodd"/></svg>
</span>
                        <span class="svg-wrapper"><svg class="icon icon-caret" viewBox="0 0 10 6"><path fill="currentColor" fill-rule="evenodd" d="M9.354.646a.5.5 0 0 0-.708 0L5 4.293 1.354.646a.5.5 0 0 0-.708.708l4 4a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0 0-.708" clip-rule="evenodd"/></svg>
</span>
                      </summary>
                      <div
                        id="link-ai-bots"
                        class="menu-drawer__submenu has-submenu gradient motion-reduce"
                        tabindex="-1"
                      >
                        <div class="menu-drawer__inner-submenu">
                          <button class="menu-drawer__close-button link link--text focus-inset" aria-expanded="true">
                            <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-arrow" viewBox="0 0 14 10"><path fill="currentColor" fill-rule="evenodd" d="M8.537.808a.5.5 0 0 1 .817-.162l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 1 1-.708-.708L11.793 5.5H1a.5.5 0 0 1 0-1h10.793L8.646 1.354a.5.5 0 0 1-.109-.546" clip-rule="evenodd"/></svg>
</span>
                            AI Bots
                          </button>
                          <ul class="menu-drawer__menu list-menu" role="list" tabindex="-1"><li><a
                                    id="HeaderDrawer-ai-bots-cbot-testing-v29"
                                    href="/pages/cbot-testing-v29"
                                    class="menu-drawer__menu-item link link--text list-menu__item focus-inset"
                                    
                                  >
                                    cbot-testing-v29
                                  </a></li><li><a
                                    id="HeaderDrawer-ai-bots-bulk-run"
                                    href="/pages/data-entry-ai"
                                    class="menu-drawer__menu-item link link--text list-menu__item focus-inset"
                                    
                                  >
                                    Bulk Run
                                  </a></li></ul>
                        </div>
                      </div>
                    </details></li><li><details id="Details-menu-drawer-menu-item-5">
                      <summary
                        id="HeaderDrawer-tests"
                        class="menu-drawer__menu-item list-menu__item link link--text focus-inset menu-drawer__menu-item--active"
                      >
                        Tests
                        <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-arrow" viewBox="0 0 14 10"><path fill="currentColor" fill-rule="evenodd" d="M8.537.808a.5.5 0 0 1 .817-.162l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 1 1-.708-.708L11.793 5.5H1a.5.5 0 0 1 0-1h10.793L8.646 1.354a.5.5 0 0 1-.109-.546" clip-rule="evenodd"/></svg>
</span>
                        <span class="svg-wrapper"><svg class="icon icon-caret" viewBox="0 0 10 6"><path fill="currentColor" fill-rule="evenodd" d="M9.354.646a.5.5 0 0 0-.708 0L5 4.293 1.354.646a.5.5 0 0 0-.708.708l4 4a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0 0-.708" clip-rule="evenodd"/></svg>
</span>
                      </summary>
                      <div
                        id="link-tests"
                        class="menu-drawer__submenu has-submenu gradient motion-reduce"
                        tabindex="-1"
                      >
                        <div class="menu-drawer__inner-submenu">
                          <button class="menu-drawer__close-button link link--text focus-inset" aria-expanded="true">
                            <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-arrow" viewBox="0 0 14 10"><path fill="currentColor" fill-rule="evenodd" d="M8.537.808a.5.5 0 0 1 .817-.162l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 1 1-.708-.708L11.793 5.5H1a.5.5 0 0 1 0-1h10.793L8.646 1.354a.5.5 0 0 1-.109-.546" clip-rule="evenodd"/></svg>
</span>
                            Tests
                          </button>
                          <ul class="menu-drawer__menu list-menu" role="list" tabindex="-1"><li><a
                                    id="HeaderDrawer-tests-cbot-development"
                                    href="/pages/cbot-development"
                                    class="menu-drawer__menu-item link link--text list-menu__item focus-inset"
                                    
                                  >
                                    cbot-development
                                  </a></li><li><a
                                    id="HeaderDrawer-tests-frontend-test"
                                    href="/pages/frontend-test"
                                    class="menu-drawer__menu-item link link--text list-menu__item focus-inset"
                                    
                                  >
                                    Frontend Test
                                  </a></li><li><a
                                    id="HeaderDrawer-tests-development-v3"
                                    href="/pages/development-v3"
                                    class="menu-drawer__menu-item link link--text list-menu__item focus-inset"
                                    
                                  >
                                    development-v3
                                  </a></li><li><a
                                    id="HeaderDrawer-tests-bulk-run-test-tr"
                                    href="/pages/bulk-run-test-tr"
                                    class="menu-drawer__menu-item link link--text list-menu__item focus-inset menu-drawer__menu-item--active"
                                    
                                      aria-current="page"
                                    
                                  >
                                    Bulk Run Test TR
                                  </a></li></ul>
                        </div>
                      </div>
                    </details></li></ul>
          </nav>
          <div class="menu-drawer__utility-links"><a
                href="https://shopify.com/66377809989/account?locale=en&region_country=HK"
                class="menu-drawer__account link focus-inset h5 medium-hide large-up-hide"
                rel="nofollow"
              ><account-icon><span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-account" viewBox="0 0 18 19"><path fill="currentColor" fill-rule="evenodd" d="M6 4.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0m3-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8m5.58 12.15c1.12.82 1.83 2.24 1.91 4.85H1.51c.08-2.6.79-4.03 1.9-4.85C4.66 11.75 6.5 11.5 9 11.5s4.35.26 5.58 1.15M9 10.5c-2.5 0-4.65.24-6.17 1.35C1.27 12.98.5 14.93.5 18v.5h17V18c0-3.07-.77-5.02-2.33-6.15-1.52-1.1-3.67-1.35-6.17-1.35" clip-rule="evenodd"/></svg>
</span></account-icon>Account</a><div class="menu-drawer__localization header-localization">
</div><ul class="list list-social list-unstyled" role="list"></ul>
          </div>
        </div>
      </div>
    </div>
  </details>
</header-drawer>
<a href="/" class="header__heading-link link link--text focus-inset"><span class="h2">aib-test2</span></a>

<nav class="header__inline-menu">
  <ul class="list-menu list-menu--inline" role="list"><li><a
            id="HeaderMenu-home"
            href="/"
            class="header__menu-item list-menu__item link link--text focus-inset"
            
          >
            <span
            >Home</span>
          </a></li><li><a
            id="HeaderMenu-catalog"
            href="/collections/all"
            class="header__menu-item list-menu__item link link--text focus-inset"
            
          >
            <span
            >Catalog</span>
          </a></li><li><a
            id="HeaderMenu-contact"
            href="/pages/contact"
            class="header__menu-item list-menu__item link link--text focus-inset"
            
          >
            <span
            >Contact</span>
          </a></li><li><header-menu>
            <details id="Details-HeaderMenu-4">
              <summary
                id="HeaderMenu-ai-bots"
                class="header__menu-item list-menu__item link focus-inset"
              >
                <span
                >AI Bots</span><svg class="icon icon-caret" viewBox="0 0 10 6"><path fill="currentColor" fill-rule="evenodd" d="M9.354.646a.5.5 0 0 0-.708 0L5 4.293 1.354.646a.5.5 0 0 0-.708.708l4 4a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0 0-.708" clip-rule="evenodd"/></svg>
</summary>
              <ul
                id="HeaderMenu-MenuList-4"
                class="header__submenu list-menu list-menu--disclosure color-scheme-1 gradient caption-large motion-reduce global-settings-popup"
                role="list"
                tabindex="-1"
              ><li><a
                        id="HeaderMenu-ai-bots-cbot-testing-v29"
                        href="/pages/cbot-testing-v29"
                        class="header__menu-item list-menu__item link link--text focus-inset caption-large"
                        
                      >
                        cbot-testing-v29
                      </a></li><li><a
                        id="HeaderMenu-ai-bots-bulk-run"
                        href="/pages/data-entry-ai"
                        class="header__menu-item list-menu__item link link--text focus-inset caption-large"
                        
                      >
                        Bulk Run
                      </a></li></ul>
            </details>
          </header-menu></li><li><header-menu>
            <details id="Details-HeaderMenu-5">
              <summary
                id="HeaderMenu-tests"
                class="header__menu-item list-menu__item link focus-inset"
              >
                <span
                    class="header__active-menu-item"
                  
                >Tests</span><svg class="icon icon-caret" viewBox="0 0 10 6"><path fill="currentColor" fill-rule="evenodd" d="M9.354.646a.5.5 0 0 0-.708 0L5 4.293 1.354.646a.5.5 0 0 0-.708.708l4 4a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0 0-.708" clip-rule="evenodd"/></svg>
</summary>
              <ul
                id="HeaderMenu-MenuList-5"
                class="header__submenu list-menu list-menu--disclosure color-scheme-1 gradient caption-large motion-reduce global-settings-popup"
                role="list"
                tabindex="-1"
              ><li><a
                        id="HeaderMenu-tests-cbot-development"
                        href="/pages/cbot-development"
                        class="header__menu-item list-menu__item link link--text focus-inset caption-large"
                        
                      >
                        cbot-development
                      </a></li><li><a
                        id="HeaderMenu-tests-frontend-test"
                        href="/pages/frontend-test"
                        class="header__menu-item list-menu__item link link--text focus-inset caption-large"
                        
                      >
                        Frontend Test
                      </a></li><li><a
                        id="HeaderMenu-tests-development-v3"
                        href="/pages/development-v3"
                        class="header__menu-item list-menu__item link link--text focus-inset caption-large"
                        
                      >
                        development-v3
                      </a></li><li><a
                        id="HeaderMenu-tests-bulk-run-test-tr"
                        href="/pages/bulk-run-test-tr"
                        class="header__menu-item list-menu__item link link--text focus-inset caption-large list-menu__item--active"
                        
                          aria-current="page"
                        
                      >
                        Bulk Run Test TR
                      </a></li></ul>
            </details>
          </header-menu></li></ul>
</nav>

<div class="header__icons header__icons--localization header-localization">
      <div class="desktop-localization-wrapper">
</div>
      

<details-modal class="header__search">
  <details>
    <summary
      class="header__icon header__icon--search header__icon--summary link focus-inset modal__toggle"
      aria-haspopup="dialog"
      aria-label="Search"
    >
      <span>
        <span class="svg-wrapper"><svg fill="none" class="icon icon-search" viewBox="0 0 18 19"><path fill="currentColor" fill-rule="evenodd" d="M11.03 11.68A5.784 5.784 0 1 1 2.85 3.5a5.784 5.784 0 0 1 8.18 8.18m.26 1.12a6.78 6.78 0 1 1 .72-.7l5.4 5.4a.5.5 0 1 1-.71.7z" clip-rule="evenodd"/></svg>
</span>
        <span class="svg-wrapper header__icon-close"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-close" viewBox="0 0 18 17"><path fill="currentColor" d="M.865 15.978a.5.5 0 0 0 .707.707l7.433-7.431 7.579 7.282a.501.501 0 0 0 .846-.37.5.5 0 0 0-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 1 0-.707-.708L8.991 7.853 1.413.573a.5.5 0 1 0-.693.72l7.563 7.268z"/></svg>
</span>
      </span>
    </summary>
    <div
      class="search-modal modal__content gradient"
      role="dialog"
      aria-modal="true"
      aria-label="Search"
    >
      <div class="modal-overlay"></div>
      <div
        class="search-modal__content search-modal__content-bottom"
        tabindex="-1"
      ><predictive-search class="search-modal__form" data-loading-text="Loading..."><form action="/search" method="get" role="search" class="search search-modal__form">
          <div class="field">
            <input
              class="search__input field__input"
              id="Search-In-Modal"
              type="search"
              name="q"
              value=""
              placeholder="Search"role="combobox"
                aria-expanded="false"
                aria-owns="predictive-search-results"
                aria-controls="predictive-search-results"
                aria-haspopup="listbox"
                aria-autocomplete="list"
                autocorrect="off"
                autocomplete="off"
                autocapitalize="off"
                spellcheck="false">
            <label class="field__label" for="Search-In-Modal">Search</label>
            <input type="hidden" name="options[prefix]" value="last">
            <button
              type="reset"
              class="reset__button field__button hidden"
              aria-label="Clear search term"
            >
              <span class="svg-wrapper"><svg fill="none" stroke="currentColor" class="icon icon-close" viewBox="0 0 18 18"><circle cx="9" cy="9" r="8.5" stroke-opacity=".2"/><path stroke-linecap="round" stroke-linejoin="round" d="M11.83 11.83 6.172 6.17M6.229 11.885l5.544-5.77"/></svg>
</span>
            </button>
            <button class="search__button field__button" aria-label="Search">
              <span class="svg-wrapper"><svg fill="none" class="icon icon-search" viewBox="0 0 18 19"><path fill="currentColor" fill-rule="evenodd" d="M11.03 11.68A5.784 5.784 0 1 1 2.85 3.5a5.784 5.784 0 0 1 8.18 8.18m.26 1.12a6.78 6.78 0 1 1 .72-.7l5.4 5.4a.5.5 0 1 1-.71.7z" clip-rule="evenodd"/></svg>
</span>
            </button>
          </div><div class="predictive-search predictive-search--header" tabindex="-1" data-predictive-search>

<div class="predictive-search__loading-state">
  <svg xmlns="http://www.w3.org/2000/svg" class="spinner" viewBox="0 0 66 66"><circle stroke-width="6" cx="33" cy="33" r="30" fill="none" class="path"/></svg>

</div>
</div>

            <span class="predictive-search-status visually-hidden" role="status" aria-hidden="true"></span></form></predictive-search><button
          type="button"
          class="search-modal__close-button modal__close-button link link--text focus-inset"
          aria-label="Close"
        >
          <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-close" viewBox="0 0 18 17"><path fill="currentColor" d="M.865 15.978a.5.5 0 0 0 .707.707l7.433-7.431 7.579 7.282a.501.501 0 0 0 .846-.37.5.5 0 0 0-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 1 0-.707-.708L8.991 7.853 1.413.573a.5.5 0 1 0-.693.72l7.563 7.268z"/></svg>
</span>
        </button>
      </div>
    </div>
  </details>
</details-modal>

<a
          href="https://shopify.com/66377809989/account?locale=en&region_country=HK"
          class="header__icon header__icon--account link focus-inset small-hide"
          rel="nofollow"
        ><account-icon><span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-account" viewBox="0 0 18 19"><path fill="currentColor" fill-rule="evenodd" d="M6 4.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0m3-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8m5.58 12.15c1.12.82 1.83 2.24 1.91 4.85H1.51c.08-2.6.79-4.03 1.9-4.85C4.66 11.75 6.5 11.5 9 11.5s4.35.26 5.58 1.15M9 10.5c-2.5 0-4.65.24-6.17 1.35C1.27 12.98.5 14.93.5 18v.5h17V18c0-3.07-.77-5.02-2.33-6.15-1.52-1.1-3.67-1.35-6.17-1.35" clip-rule="evenodd"/></svg>
</span></account-icon><span class="visually-hidden">Account</span>
        </a><a href="/cart" class="header__icon header__icon--cart link focus-inset" id="cart-icon-bubble">
        
          <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-cart-empty" viewBox="0 0 40 40"><path fill="currentColor" fill-rule="evenodd" d="M15.75 11.8h-3.16l-.77 11.6a5 5 0 0 0 4.99 5.34h7.38a5 5 0 0 0 4.99-5.33L28.4 11.8zm0 1h-2.22l-.71 10.67a4 4 0 0 0 3.99 4.27h7.38a4 4 0 0 0 4-4.27l-.72-10.67h-2.22v.63a4.75 4.75 0 1 1-9.5 0zm8.5 0h-7.5v.63a3.75 3.75 0 1 0 7.5 0z"/></svg>
</span>
        
        <span class="visually-hidden">Cart</span></a>
    </div>
  </header>
</sticky-header>

<cart-notification>
  <div class="cart-notification-wrapper page-width">
    <div
      id="cart-notification"
      class="cart-notification focus-inset color-scheme-1 gradient"
      aria-modal="true"
      aria-label="Item added to your cart"
      role="dialog"
      tabindex="-1"
    >
      <div class="cart-notification__header">
        <h2 class="cart-notification__heading caption-large text-body"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-checkmark" viewBox="0 0 12 9"><path fill="currentColor" fill-rule="evenodd" d="M11.35.643a.5.5 0 0 1 .006.707l-6.77 6.886a.5.5 0 0 1-.719-.006L.638 4.845a.5.5 0 1 1 .724-.69l2.872 3.011 6.41-6.517a.5.5 0 0 1 .707-.006z" clip-rule="evenodd"/></svg>
Item added to your cart
        </h2>
        <button
          type="button"
          class="cart-notification__close modal__close-button link link--text focus-inset"
          aria-label="Close"
        >
          <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-close" viewBox="0 0 18 17"><path fill="currentColor" d="M.865 15.978a.5.5 0 0 0 .707.707l7.433-7.431 7.579 7.282a.501.501 0 0 0 .846-.37.5.5 0 0 0-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 1 0-.707-.708L8.991 7.853 1.413.573a.5.5 0 1 0-.693.72l7.563 7.268z"/></svg>
</span>
        </button>
      </div>
      <div id="cart-notification-product" class="cart-notification-product"></div>
      <div class="cart-notification__links">
        <a
          href="/cart"
          id="cart-notification-button"
          class="button button--secondary button--full-width"
        >View cart</a>
        <form action="/cart" method="post" id="cart-notification-form">
          <button class="button button--primary button--full-width" name="checkout">
            Check out
          </button>
        </form>
        <button type="button" class="link button-label">Continue shopping</button>
      </div>
    </div>
  </div>
</cart-notification>
<style data-shopify>
  .cart-notification {
    display: none;
  }
</style>


<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Organization",
    "name": "aib-test2",
    
    "sameAs": [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ],
    "url": "https:\/\/aib-test2.myshopify.com\/pages\/bulk-run-test-tr"
  }
</script>
</div>
<!-- END sections: header-group -->

    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      <section id="shopify-section-template--18442000040005__custom_liquid_jn9nJP" class="shopify-section section"><style data-shopify>.section-template--18442000040005__custom_liquid_jn9nJP-padding {
    padding-top: calc(0px * 0.75);
    padding-bottom: calc(52px  * 0.75);
  }

  @media screen and (min-width: 750px) {
    .section-template--18442000040005__custom_liquid_jn9nJP-padding {
      padding-top: 0px;
      padding-bottom: 52px;
    }
  }</style><div class="color-scheme-1 gradient">
  <div class="section-template--18442000040005__custom_liquid_jn9nJP-padding">
    <!-- v20250816: use gdrivepicker -->
<!-- v20250816: move storeid out from fetching -->
<!-- 20250817: move gdriveApi to production -->
<!-- 20250817v2: redirect to original after google login -->
<!-- 20250824: use snippet -->
<!-- 20250904: update + storage change -->
<!-- 20250919: update different functions -->

<!-- 20250919: update different functions -->

<script type="text/javascript" src="https://js.live.net/v7.2/OneDrive.js"></script>

<!-- 20250824: use snippet -->
<!-- 20250904: update + storage change -->





<div class="chatbot-container">    
  <div class="chatbot-window">
    <div class="tokens-display">
      <div>
        <div id="shopify-customer" data-customer-id="7727333081157"></div>
        AI credits: <span id="customer-tokens"></span>
        <select id="credit-account-selector" class="credit-account-selector"></select>
      </div>
      <select id="source-mode-selector" class="storage-mode-selector"></select>
    </div>
    <div class="chatbot-messages">
      </div>
    
    <div class="chatbot-input">
    <div class="chatbot-input-container">
        <textarea placeholder="Type your message..." class="chatbot-input-field" id="chatbot-input-field" rows="2"></textarea>
        <div class="chatbot-button-row">
        <button class="chatbot-attach" id="attach-button" title="Attach file">+</button>
        <select id="bot-selector" class="bot-selector"></select>
        <button class="chatbot-send" id="send-button">➤</button>
        </div>
        
        
        <div class="chatbot-select-row" style="display: flex; align-items: center; gap: 10px;">
            <span>History:</span>
            <select id="storage-mode-selector" class="storage-mode-selector"></select>
            <span id="save-status" style="display: none;"></span>
            <span id="edit-save-dir-btn" class="edit-save-dir-btn" style="display:none; margin-right:8px;">Edit</span>
        </div>
        
        <div class="chat-rooms-sidebar room-selection">
        <h3>Chat Rooms</h3>
        <button id="create-room" class="create-room-btn">+ New Room</button>
        <ul id="room-list" class="room-list">
            <li class="room-item active" data-room-id="general">General</li>
        </ul>
        
        

        <div class="folder-inputs" id="folder-inputs" style="display: none; margin-top: 15px;">
            
            
            <div class="input-folder-container" style="display: flex; align-items: center; gap: 10px;">
                <span>Input Folder:</span>
                <button id="choose-folder" class="choose-db-input-btn">Choose</button>
                <button id="choose-gdrive" class="choose-gdrive-btn">Choose</button>
                <button id="choose-od-input" class="choose-od-input-btn">Choose</button>
                <button id="choose-bd-input" class="choose-bd-input-btn">Choose</button>
                <div id="selected-input-folder"></div>

                <input type="text" id="input-folder" placeholder="Choose folder, or enter folder ID" class="folder-input">
                <button id="view-folder-btn" class="view-folder-btn" style="display: none;">Confirm</button>
            </div>

            
            
            <div class="output-folder-container" style="display: flex; align-items: center; gap: 10px;">
                <span>Output Folder:</span>
                <button id="choose-db-output" class="choose-db-output-btn">Choose</button>
                <button id="choose-output" class="choose-output-btn">Choose</button>
                <button id="choose-od-output" class="choose-od-output-btn">Choose</button>
                <button id="choose-bd-output" class="choose-bd-output-btn">Choose</button>
                <div id="selected-output-folder"></div>
                <input type="text" id="output-folder" placeholder="Choose folder, enter folder ID, or leave blank to use Input Folder" class="folder-input" style="margin-top: 10px;">
            </div>

        </div>
        </div>
    </div>
    </div>

    <div id="folder-popup" class="folder-popup" style="display: none;">
        <div class="folder-popup-content">
          <span class="close-popup">&times;</span>
          <h3>Folder Contents</h3>
          <div id="folder-stats"></div>
          <div class="popup-actions">
            <button id="use-folder" class="use-folder-btn">✓ Use This Folder</button>
            <button id="cancel-folder" class="cancel-folder-btn">✕ Cancel</button>
          </div>
        </div>
      </div>    
  </div>
</div>



  <div class="action-buttons-container">
    <div>
      <span id="selected-file-name"></span>
    </div>
    <button id="choose-local-input">Choose Local Input Folder</button>
    <button id="choose-local-output">Choose Local Output Folder</button>
    
    

    <label>
      <input type="checkbox" id="async-mode-checkbox">
      Bot Completion Notification
    </label>
    
    

    <div id="snackbar" class="snackbar" style="display:none;">
      <span id="snackbar-close" class="sidebar-close">×</span>
      <div id="snackbar-message"></div>
    </div>
  </div>



<script>
    // v3: fix the shift-enter vs enter issue
    // 20250816-v2: add adilk expanding window
    // lt-expanding-window: comment out the Text-Auto-Expand button
    // lt-expanding-window: comment out logs

    let userInputExpWindow = document.getElementById('chatbot-input-field');
    function autoExpandTextarea() {
      // lt-expanding-window: comment out logs
      //console.log('autoExpandTextarea called, userInputExpWindow:', userInputExpWindow);
      if (!userInputExpWindow) {
        console.error('userInputExpWindow is not defined');
        return;
      }
      // lt-expanding-window: comment out logs
      //console.log('Current height:', userInputExpWindow.style.height);
      //console.log('ScrollHeight:', userInputExpWindow.scrollHeight);
      //console.log('Current value length:', userInputExpWindow.value.length);
      
      // Reset height to auto to get accurate scrollHeight
      userInputExpWindow.style.height = 'auto';
      
      // Calculate new height with min/max constraints
      const minHeight = 20; // Minimum height in pixels
      const maxHeight = 150; // Maximum height in pixels
      const scrollHeight = userInputExpWindow.scrollHeight;
      
      let newHeight;
      if (userInputExpWindow.value === '') {
        // If empty, use minimum height
        newHeight = minHeight;
      } else {
        // Use scroll height but constrain to min/max
        newHeight = Math.max(minHeight, Math.min(scrollHeight, maxHeight));
      }
      
      userInputExpWindow.style.height = newHeight + 'px';
      // lt-expanding-window: comment out logs
      //console.log('New height set to:', newHeight + 'px');
    }

    // Initialize textarea height
    autoExpandTextarea();    
    
    // lt-expanding-window: comment out the Text-Auto-Expand button
    
    
    // Add debugging to check if userInputExpWindow is properly selected
    // lt-expanding-window: comment out logs
    //console.log('userInputExpWindow element:', userInputExpWindow);
    //console.log('userInputExpWindow tagName:', userInputExpWindow ? userInputExpWindow.tagName : 'undefined');
    //console.log('userInputExpWindow is connected to DOM:', userInputExpWindow ? userInputExpWindow.isConnected : 'undefined');
    //console.log('userInputExpWindow value:', userInputExpWindow ? userInputExpWindow.value : 'undefined');
    
    // Verify the element exists and has the right properties
    if (!userInputExpWindow) {
      // lt-expanding-window: comment out logs
      //console.error('ERROR: userInputExpWindow element not found!');
    }
    
    // Test if event listeners can be attached at all
    userInputExpWindow.addEventListener('focus', function() {
      // lt-expanding-window: comment out logs
      //console.log('Focus event triggered - event listeners are working!');
    });
    
    userInputExpWindow.addEventListener('blur', function() {
      // lt-expanding-window: comment out logs
      //console.log('Blur event triggered');
    });

    // lt-expanding-window: comment out logs
    //console.log("AAAA");
    
    // Add event listeners for auto-expansion
    userInputExpWindow.addEventListener('input', function() {
      // lt-expanding-window: comment out logs
      //console.log('Input event triggered, value length:', this.value.length);
      autoExpandTextarea();
      
      // Reset to minimum size when empty
      if (this.value === '') {
        // lt-expanding-window: comment out logs
        //console.log('Input is empty, resetting to minimum height');
        this.style.height = '20px';
      }
    });

    // Add keydown event listener with proper Enter vs Shift+Enter handling
    userInputExpWindow.addEventListener('keydown', function (e) {
      // lt-expanding-window: comment out logs
      //console.log('Keydown event triggered, key:', e.key, 'code:', e.code, 'shiftKey:', e.shiftKey);
      
      if (e.key === 'Enter') {
        // lt-expanding-window: comment out logs
        console.log('Enter key pressed');
        if (e.shiftKey) {
          // Shift+Enter: Allow new line and trigger auto-expansion
          // lt-expanding-window: comment out logs
          //console.log('Shift+Enter detected - allowing new line and auto-expansion');
          setTimeout(function() {
            autoExpandTextarea();
          }, 0);
        } else {
          // Regular Enter: Prevent default behavior to stop newline from being added
          // lt-expanding-window: comment out logs
          //console.log('Regular Enter detected - preventing default behavior and auto-expansion');
          e.preventDefault(); // This prevents the newline from being added to the textarea
          sendButton.click();
          
          // Trigger form submission or whatever should happen on Enter
          // You can add form submission logic here if needed
          // For example: document.querySelector('form').submit();
          
          return false; // Additional prevention
        }
      } else {
        // For other keys, allow auto-expansion
        // lt-expanding-window: comment out logs
        //console.log('Other key pressed, allowing auto-expansion:', e.key);
        setTimeout(function() {
          autoExpandTextarea();
        }, 0);
      }
    });

    // Add keyup event listener for non-Enter keys only
    userInputExpWindow.addEventListener('keyup', function (e) {
      // lt-expanding-window: comment out logs
      //console.log('Keyup event triggered, key:', e.key);
      
      // Don't auto-expand on Enter keyup to avoid conflicts
      if (e.key !== 'Enter') {
        setTimeout(function() {
          autoExpandTextarea();
        }, 0);
      }
    });

    // Add paste event listener for auto-expansion
    userInputExpWindow.addEventListener('paste', function() {
      // lt-expanding-window: comment out logs
      //console.log('Paste event triggered');
      setTimeout(function() {
        autoExpandTextarea();
      }, 0);
    });

</script>

<style>
    .chatbot-input-field {
    flex: 1;
    padding: 10px;
    border: 1px solid #ababab;
    border-radius: 4px;
    resize: none;
    overflow-y: auto;
    min-height: 20px;
    max-height: 150px;
    line-height: 1.4;
    font-family: inherit;
    font-size: 14px;
    transition: height 0.1s ease;
    box-sizing: border-box;
  }
    .input-row {
    display: flex;
    align-items: flex-end;
    gap: 8px;
  }
</style> 
<!-- 20250919: update different functions -->


<!-- 20250824: use snippet -->

<script>
    // fetching_privateCdn_edbert-aib-test2-v3: comment out storeId and move it out
    // fetching_privateCdn_edbert-aib-test2-v4
    // fetching-js-edbert-aib-test2-v5: fix ipAdress
    // fetching-js-edbert-aib-test2-v5: modify attachBtn.textContent (uncertain original text)
    // fetching_privateCdn_edbert-aib-test2-v5: switch from gdrive to langyaai-rag

    // const baseUrl_tokens = 'https://aibtest3.35.201.182.34.nip.io';
    // const baseUrl_ai = 'https://aibtest3.104.199.162.117.nip.io';
    // const baseUrl_gcp = 'https://aibtest3.34.81.25.222.nip.io';
    // const baseUrl_ai = 'https://us-central1-project-mb-bend.cloudfunctions.net/node_ai_aib_test3_v26';
    const baseUrl_ai = 'https://us-central1-project-mb-bend.cloudfunctions.net/node_ai_v29';
    const baseUrl_gcp = 'https://us-central1-project-mb-bend.cloudfunctions.net/node_gcp_v29';
    const baseUrl_tokens = 'https://us-central1-project-mb-bend.cloudfunctions.net/node_tokens_v29_AIB_TEST2';

    // fetching_privateCdn_edbert-aib-test2-v3: comment out storeId and move it out
    // const storeId = 'langya-tech';

    //------------- logic -------------:

    //# Fetch tokens from backend (v1)

    async function fetchTokens() {
    try {
        const response = await fetch(`${baseUrl_tokens}/get-tokens/${CUSTOMER_ID}`);
        const data = await response.json();

        if (data.creditAccounts == null || data.creditAccounts == {}) {
        tokensDisplay.textContent = "0";
        creditAccounts = [{ balance: { amount: "0", currencyCode: "HKD" } }];
        return;
        }
        creditAccounts = data.creditAccounts;
        if (!currentCreditAccount) {
        currentCreditAccount = creditAccounts[0];
        }
        currentCreditAccount = creditAccounts.filter(acc => acc.balance.currencyCode == currentCreditAccount.balance.currencyCode)[0];
        tokensDisplay.textContent = `${currentCreditAccount.balance.amount}`;
    } catch (error) {
        console.error('Error fetching tokens:', error);
        sendLogToBackend(`Error fetching tokens: ${error}`);
    }
    }

    //# Update tokens on backend (v1)
    async function updateTokens(messageId, inputTokens, outputTokens, currencyChosen, calculatedCostFromBot) {
    const cost = calculateTokenConsumption(inputTokens, outputTokens, currencyChosen, calculatedCostFromBot);
    const account = creditAccounts.filter(acc => acc.balance.currencyCode == currencyChosen)[0];
    let updatedValue = account.balance.amount - cost;
    let botUsed = currentBot.name;
    let amount = cost;

    try {
        const response = await fetch(`${baseUrl_tokens}/update-tokens`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ customerId: CUSTOMER_ID, tokenValue: updatedValue, messageId: messageId, botUsed: botUsed, previousAmount: currentCreditAccount.balance.amount, amount: amount, currency: currencyChosen }),
        });
        if (!response.ok) {
        throw new Error('Failed to update tokens');
        return currentCreditAccount.balance.amount;
        }
        fetchTokens();
        return updatedValue;
    } catch (error) {
        console.error('Error updating tokens:', error);
        sendLogToBackend(`Error updating tokens: ${error}`);
        return currentCreditAccount.balance.amount;
    }
    }

    async function getChatResponse(query, msgId, creditAccount) {
    console.log('current bot:', currentBot);
    console.log('bot URL:', currentBot.managerUrl);
    console.log('async mode:', asyncMode);
    let inputFolderValue = inputFolder.value.trim();
    let outputFolderValue = outputFolder.value.trim();
    try {
        // fetching_privateCdn_edbert-aib-test2-v5: fix ipAdress
        
        const ipAddress = await getIPadress();
        console.log(`ipAddress: ${ipAddress}`);

        limitedHistory = chatHistory.slice(-10);
        limitedUserHistory = userHistory.slice(-11, -1);
        let amount = currentBot.cost;
        let response;
        if (attachedFiles.length > 0) {
        const formData = new FormData();
        formData.append('user_query', query);
        formData.append('chat_history', JSON.stringify(limitedHistory));
        formData.append('user_history', JSON.stringify(limitedUserHistory));
        formData.append('msgId', msgId);
        formData.append('userId', CUSTOMER_ID);
        formData.append('roomId', currentRoomId);
        formData.append('amount', amount);
        formData.append('beforeBalance', creditAccount.balance.amount);
        // fetching_privateCdn_edbert-aib-test2-v5: fix ipAdress
        
        formData.append('customer_ip_address', ipAddress);
        
        formData.append('input_folder', null);
        formData.append('storageNo', mapper[sourceMode] || 1);
        formData.append('asyncMode', asyncMode);
        formData.append('email', email);
        formData.append('pageName', storeId);
        formData.append('dataEntryFlag', currentBot["Data Entry"]);
        formData.append('modelId', currentBot["endpoint-id"]);
        attachedFiles.forEach((file, index) => {
            formData.append('media', file);
        });
        response = await fetch(currentBot.managerUrl, {
            method: 'POST',
            headers: {'x-api-key': langya_secret_key},
            body: formData,
        });
        } else {
        response = await fetch(currentBot.managerUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
            user_query: query,
            chat_history: limitedHistory,
            user_history: limitedUserHistory,
            msgId,
            userId: CUSTOMER_ID,
            roomId: currentRoomId,
            amount: amount,
            beforeBalance: creditAccount.balance.amount,
            // fetching_privateCdn_edbert-aib-test2-v5: fix ipAdress
            
            customer_ip_address: ipAddress,

            input_folder: selectedFolderId,
            output_folder: outputFolderValue || selectedFolderId, // same output folder as input if not specified
            storageNo: mapper[sourceMode] || 1,
            asyncMode: asyncMode,
            email: email,
            pageName: storeId,
            dataEntryFlag : currentBot["Data Entry"] || 0,
            modelId: currentBot["endpoint-id"]
            }),
        });
        }
        if (!response.ok) throw new Error(await response.text());
        const data = await response.json();
        attachedFiles = [];
        // fetching-js-edbert-aib-test2-v5: modify attachBtn.textContent (uncertain original text)
        
        attachBtn.textContent = '+';

        fileInput.value = '';
        selectedFileName.textContent = '';
    
        const provider_cost = data?.provider_cost;
        const generation_id = data?.generation_id;
        const calculatedCost = data?.calculatedCost;
        
        //Token update
        if (data.answer != 'Sorry, an error occurred. Please try again.') {
        await updateTokens(msgId, data.inputTokens, data.outputTokens, creditAccount.balance.currencyCode, calculatedCost);
        }

        console.log(data);

        return data.answer
    } catch (error) {
        console.error('Error getting chat response:', error);
        return 'Sorry, an error occurred. Please try again.';
    }
    }

    function checkBotData() {
    if (currentBot.cost == null || currentBot.cost <= 0 || currentBot.currency == null) return "error";
    };

    async function getCategoriesList() {
        // fetching_privateCdn_edbert-aib-test2-v5: switch from gdrive to langyaai-rag
        
        const resp_pages = await fetch('https://us-central1-langyaai-rag.cloudfunctions.net/firestore_v1/query', {

            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
                collectionName: 'pageMaster'
            })
        })
        const dat_pages = await resp_pages.json();
        const pageMasterData = dat_pages.results;
        const siteData = pageMasterData.filter((data) => data.id == storeId)[0];

        // fetching_privateCdn_edbert-aib-test2-v5: switch from gdrive to langyaai-rag
        
        const resp_cat = await fetch('https://us-central1-langyaai-rag.cloudfunctions.net/firestore_v1/query', {

            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
                collectionName: 'pageList'
            })
        })
        const dat_cat = await resp_cat.json();
        const categoriesList = dat_cat.results;
        categoriesList.forEach((category) => {
            const name = category['page-list'];
            if (siteData[name] == 1) {
            botsCategories.push(category);
            }
        });
    }

    async function getBotsData() {
    try {
        // fetching_privateCdn_edbert-aib-test2-v5: switch from gdrive to langyaai-rag
        
        const resp_pages = await fetch('https://us-central1-langyaai-rag.cloudfunctions.net/firestore_v1/query', {

            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
                collectionName: 'pageMaster'
            })
        })
        const dat_pages = await resp_pages.json();
        const pageMasterData = dat_pages.results;
        const tableName = pageMasterData.filter(data => data.id == storeId)[0]['endpoint-table-name'];
        DataEntry = pageMasterData.filter(data => data.id == storeId)[0]['Data Entry'];
        console.log(pageMasterData);
        // fetching_privateCdn_edbert-aib-test2-v5: switch from gdrive to langyaai-rag
        
        const resp_tab = await fetch('https://us-central1-langyaai-rag.cloudfunctions.net/firestore_v1/query', {

            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
                collectionName: tableName
            })
        })
        const dat_tab = await resp_tab.json();
        const results = dat_tab.results;
        console.log(JSON.stringify(results));
        botsList = []; // Reset the list
        results.forEach(doc => {
        if (doc.Showing === 1) {
            doc.id = doc.id;
            doc.model = doc.Model;
            doc.name = doc.id;
            doc.cost = doc["AI Credit"] || 1;
            doc.url = doc.url || '';
            doc.developer = doc.Developer;
            doc.inputTokenPrice = doc["Input Token Price Per Mil"];
            doc.outputTokenPrice = doc["Output Token Price Per Mil"];
            doc.currency = doc["Currency"];
            botsList.push(doc);
        }
        });
        console.log(JSON.stringify(botsList));
        populateBotSelector();
        return botsList;
    } catch (error) {
        console.error(error);
    }
    }

    async function fetchCurrencies() {
        // fetching_privateCdn_edbert-aib-test2-v5: switch from gdrive to langyaai-rag
        
        const resp_rate = await fetch('https://us-central1-langyaai-rag.cloudfunctions.net/firestore_v1/query', {

            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
                collectionName: 'fxRate'
            })
        })
        const dat_rate = await resp_rate.json();
        const fxRates = dat_rate.results;
        fxRates.forEach(exchange => {
            currencies[exchange['quote-currency']] = exchange['Rate'];
        });
    }

    async function sendBtnLogic(creditAccount) {
    let now = new Date().toISOString();
    let text = userInput.value;
    const message = userInput.value.trim();

    //user message
    await addMessage(text, true, now, null, false, false, attachedFiles);
    reorderRoomList(currentRoomId);
    updateTimeOfChatRoom();
    userInput.value = '';
    startBotThinking();
    await saveChatMessage(text, 'user', now, null, false, null);

    //Bot response
    let isImage = currentBot["Text-to-Image"] == 1 ? true : false;
    let msgId = await getUniqueId();
    let botNow = new Date().toISOString();

    if (checkBotData() == 'error') {
        await addMessage('Sorry, an error occurred. Please try again.', false, botNow, currentBot.name, isImage, false, null);
        await saveChatMessage('Sorry, an error occurred. Please try again.', 'bot', botNow, currentBot.name, isImage, msgId);

        //update time of chat
        updateTimeOfChatRoom();

        //activate send button
        sendButton.disabled = false;
        sendButton.classList.remove('disabled');
        return;
    }
    const answer = await getChatResponse(message, msgId, creditAccount);
    await addMessage(answer, false, botNow, currentBot.name, isImage, false, null);
    await saveChatMessage(answer, 'bot', botNow, currentBot.name, isImage, msgId);

    //update time of chat
    updateTimeOfChatRoom();

    //activate send button
    sendButton.disabled = false;
    sendButton.classList.remove('disabled');
    }
</script>

<!-- v20250816: use gdrivepicker -->
<!-- 20250904: update + storage change -->

<script>
    // START Handle GDrive Input & Output Picker
    // VALUES ARE HARDCODED. FOR TESTING ONLY, IN PRODUCTION, PLEASE HIDE THESE VALUES.

    const GOOGLE_CLIENT_ID = '278296784390-ebe0cn1u26hkk4jleeq531qgkkallrf9.apps.googleusercontent.com';
    const GOOGLE_API_KEY = 'AIzaSyCSk9axnUV93s0Dpjkeq_eLRWbg_H33U6g';
    const GOOGLE_SCOPES = 'https://www.googleapis.com/auth/drive.readonly';

    // Helper functions for local mode
    function formatFileSize(bytes) {
        if (typeof bytes !== 'number') return '0 MB';
        return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
    }
    
    function calculateCost(bytes) {
        const sizeMB = bytes / (1024 * 1024);
        return sizeMB * 0.1; // Example: HKD 0.1 per MB
    }

    //#date display (v5)
    function formatDateYYYYMMDD(date) {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    //v14
    function getFileIcon(mimeType) {
        if (mimeType.startsWith('image/')) return 'ðŸ–¼ï¸';
        if (mimeType.startsWith('video/')) return 'ðŸŽ¥';
        if (mimeType.startsWith('audio/')) return 'ðŸŽµ';
        if (mimeType === 'application/pdf') return 'ðŸ“„';
        if (mimeType.startsWith('text/')) return 'ðŸ“';
        return 'ðŸ“';
    }

    let googleAccessToken = null;
    function initGooglePicker() {
        return new Promise((resolve) => {
        gapi.load('picker', { callback: resolve });
        });
    }

    async function populateInputFolder(selectedFolderId) {
        if (sourceMode === 'premium' || sourceMode === 'premiumd' || sourceMode === 'premiuml' || sourceMode === 'premiumod') {
            inputFolder.value = selectedFolderId;
            viewFolderBtn.style.display = 'block';
            viewFolderBtn.disabled = false;
            viewFolderBtn.innerHTML = 'Confirm';
            viewFolderBtn.style.backgroundColor = '#8d0033'; // Original color
            viewFolderBtn.style.cursor = 'pointer';
        } else {
            inputFolder.value = '';
            outputFolder.value = '';
            viewFolderBtn.style.display = 'none';
        }
    }

    async function populateOutputFolder(OutputFolderId) {
    if (sourceMode === 'premiumd' || sourceMode === 'premium' || sourceMode === 'premiuml' || sourceMode === 'premiumod') {
        outputFolder.value = OutputFolderId;
    } else {
        outputFolder.value = '';
    }
    }

    // Authenticate and get OAuth token
    async function authenticateGoogle() {
        return new Promise((resolve, reject) => {
        const client = google.accounts.oauth2.initTokenClient({
            client_id: GOOGLE_CLIENT_ID,
            scope: GOOGLE_SCOPES,
            callback: (tokenResponse) => {
            googleAccessToken = tokenResponse.access_token;
            resolve(tokenResponse);
            },
            error_callback: (error) => {
            console.error('Google OAuth error:', error);
            reject(error);
            },
        });
        client.requestAccessToken();
        });
    }
    // Show Google Drive folder picker
    async function showGoogleDriveInputPicker() {
        try {
        // 1. Initialize
        await initGooglePicker();
        
        // 2. Authenticate if no token
        if (!googleAccessToken) {
            await authenticateGoogle();
        }

        // 3. Create and show picker
        const view = new google.picker.DocsView(google.picker.ViewId.FOLDERS)
            .setIncludeFolders(true)
            .setSelectFolderEnabled(true);

        const picker = new google.picker.PickerBuilder()
            .addView(view)
            .setOAuthToken(googleAccessToken)
            .setDeveloperKey(GOOGLE_API_KEY)
            .setCallback(pickerInputCallback)
            .build();

        picker.setVisible(true);
        } catch (error) {
        console.error('Google Picker error:', error);
        }
    }

    // Handle selection
    function pickerInputCallback(data) {
        if (data.action === google.picker.Action.PICKED) {
        const folder = data.docs[0];
        folderId = folder.id;
        folderName = folder.name;
        selectedFolderId = folderId;
        document.getElementById('selected-input-folder').textContent = `Selected Input Folder: ${folderName}`;
        sessionStorage.setItem('selectedGoogleDriveFolder', folderId);
        
        console.log('Selected folder:', folder);
        sendLogToBackend(JSON.stringify(folder));

        useOrNot = true;
        populateInputFolder(folderId);
        } else if (data.action === google.picker.Action.CANCEL) {
        console.log('User canceled folder selection');
        }
    }

    async function showGoogleDriveOutputPicker() {
        try {
        // 1. Initialize
        await initGooglePicker();
        
        // 2. Authenticate if no token
        if (!googleAccessToken) {
            await authenticateGoogle();
        }

        // 3. Create and show picker
        const view = new google.picker.DocsView(google.picker.ViewId.FOLDERS)
            .setIncludeFolders(true)
            .setSelectFolderEnabled(true);

        const picker = new google.picker.PickerBuilder()
            .addView(view)
            .setOAuthToken(googleAccessToken)
            .setDeveloperKey(GOOGLE_API_KEY)
            .setCallback(pickerOutputCallback)
            .build();

        picker.setVisible(true);
        } catch (error) {
        console.error('Google Picker error:', error);
        }
    }

    function pickerOutputCallback(data) {
        if (data.action === google.picker.Action.PICKED) {
        const OutputFolder = data.docs[0];
        OutputFolderId = OutputFolder.id;
        const OutputFolderName = OutputFolder.name;
        outputfolderName = OutputFolderName;
        document.getElementById('selected-output-folder').textContent = `Selected Output Folder: ${OutputFolderName}`;
        sessionStorage.setItem('selectedGoogleDriveFolder', OutputFolderId);
        
        console.log('Selected folder:', OutputFolder);
        sendLogToBackend(JSON.stringify(OutputFolder));

        useOrNot = true;
        populateOutputFolder(OutputFolderId);
        } else if (data.action === google.picker.Action.CANCEL) {
        console.log('User canceled folder selection');
        }
    }
</script>

<!-- 20250919: update different functions -->



<script>
  // v2: move to production location
  // START Handle OneDrive Input & Output Picker

  
  // v2: move to production location
  
  const ONEDRIVE_CLIENT_ID = "0492ce0d-d5cb-4197-8b2f-23d7563e1c53"; 

  function launchOneDrivePicker(successCallback, cancelCallback) {
    const odOptions = {
      clientId: ONEDRIVE_CLIENT_ID,
      action: "query", // Use "query" to select folders and get their metadata
      multiSelect: false,
      advanced: {
        redirectUri: window.location.origin,
      },
      success: successCallback,
      cancel: cancelCallback,
      error: (error) => {
        console.error('OneDrive Picker error:', error);
      }
    };
    OneDrive.open(odOptions);
  }

  function odInputPickerCallback(response) {
    if (response.value.length > 0) {
      const folder = response.value[0];
      const folderId = folder.id;
      const folderName = folder.name;
      inputfolderName = folderName;

      document.getElementById('selected-folder').textContent = `Selected Input Folder: ${folderName}`;
      sessionStorage.setItem('selectedOneDriveFolder', folderId);
      console.log('Selected input folder:', folder);
      sendLogToBackend(JSON.stringify(folder));
      populateInputFolder(folderId);
    }
  }

  function odOutputPickerCallback(response) {
    if (response.value.length > 0) {
        const folder = response.value[0];
        const folderId = folder.id;
        const folderName = folder.name;
        outputfolderName = folderName;

        document.getElementById('selected-output-folder').textContent = `Selected Output Folder: ${folderName}`;
        sessionStorage.setItem('selectedOneDriveOutputFolder', folderId);
        console.log('Selected output folder:', folder);
        sendLogToBackend(JSON.stringify(folder));
        populateOutputFolder(folderId);
    }
  }

  function odPickerCancelCallback() {
    console.log('User canceled the picker.');
  }

  // This function was missing. It will be called by your event listeners.
  async function showOneDrivePicker(isOutput) {
    try {
        const successCallback = isOutput ? odOutputPickerCallback : odInputPickerCallback;
        launchOneDrivePicker(successCallback, odPickerCancelCallback);
    } catch (error) {
        console.error('OneDrive Picker error:', error);
    }
  }

</script>




<!-- 20250824: use snippet -->

<!-- 20250919: update different functions -->

<script>
    function connectDropbox() {
    window.location.href = `${baseUrl_gcp}/auth/dropbox?customerId=${CUSTOMER_ID}`;
    }

    window.onload = async () => {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('auth') === 'success') {
        const storageModeParam = urlParams.get('storageMode');
        isDropboxLinked = true;
        window.history.replaceState({}, document.title, window.location.pathname);
    }
    if (urlParams.get('storageMode')) {
        storageMode = urlParams.get('storageMode');
        storageModeSelector.value = storageMode;
    }
    };

    //----------- Local Storage Functions -----------:
    async function saveMessageLocally(messageData) {
    if (!directoryHandle) {
        console.warn('No directory selected for local saving');
        sendLogToBackend('No directory selected for local saving');
        return;
    }
    try {
        const roomDirName = `${messageData.roomId}_${messageData.roomName}`; // Combined name
        const roomDir = await directoryHandle.getDirectoryHandle(roomDirName, { create: true });

        if (messageData.attachments && messageData.attachments.length > 0) {
        const attachmentsDir = await roomDir.getDirectoryHandle('attachments', { create: true });
        const attachmentMetadata = [];
        for (const attachment of messageData.attachments) {
            const filename = attachment.name;
            const ext = filename.split('.').pop();
            const fileName = `${messageData.messageId}_${attachment.name}`; // Unique filename
            const fileHandle = await attachmentsDir.getFileHandle(fileName, { create: true });
            const writable = await fileHandle.createWritable();
            await writable.write(attachment);
            await writable.close();
            attachmentMetadata.push({
            type: attachment.type,
            ext: ext,
            name: fileName,
            path: `attachments/${fileName}`,
            });
        }
        messageData.attachments = attachmentMetadata;
        }

        if (messageData.isImage) {
        const binary = atob(messageData.message);
        const array = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
            array[i] = binary.charCodeAt(i);
        }
        const imagesDir = await roomDir.getDirectoryHandle('images', { create: true });
        const imageFileName = `${messageData.messageId}.png`;
        const imageFileHandle = await imagesDir.getFileHandle(imageFileName, { create: true });
        const imageWritable = await imageFileHandle.createWritable();
        await imageWritable.write(array);
        await imageWritable.close();
        messageData.message = `images/${imageFileName}`;
        }

        const fileHandle = await roomDir.getFileHandle('chat.json', { create: true });
        let existingMessages = [];
        try {
        const file = await fileHandle.getFile();
        const text = await file.text();
        if (text) existingMessages = JSON.parse(text) || [];
        } catch (error) {
        console.warn('No existing file or invalid JSON:', error);
        }
        existingMessages.push(messageData);
        const writable = await fileHandle.createWritable();
        await writable.write(JSON.stringify(existingMessages, null, 2));
        await writable.close();
    } catch (error) {
        console.error('Error saving message locally:', error);
        sendLogToBackend(`Error saving message locally: ${error}`);
    }
    }

    async function loadMessagesLocally(roomId) {
    if (!directoryHandle) {
        console.warn('No directory selected for local loading');
        sendLogToBackend(`No directory selected for local loading`);
        return [];
    }
    try {
        // Find the directory with the combined name
        let roomDirName = null;
        const roomEntries = directoryHandle.entries(); // Returns an async iterator
        for await (const [name, handle] of roomEntries) {
        console.log(name);
        if (handle.kind === 'directory' && name.startsWith(roomId + '_')) {
            roomDirName = name; // Use the full combined name (e.g., "room123_MyRoom")
            break;
        }
        }
        if (!roomDirName) {
        console.warn(`No directory found for roomId ${roomId}`);
        sendLogToBackend(`No directory found for roomId ${roomId}`);
        return [];
        }

        const roomDir = await directoryHandle.getDirectoryHandle(roomDirName, { create: false });
        console.log(currentRoom);
        sendLogToBackend(currentRoom);
        const fileHandle = await roomDir.getFileHandle('chat.json', { create: false });
        const file = await fileHandle.getFile();
        const text = await file.text();
        const messages = JSON.parse(text) || [];

        console.log(messages);
        sendLogToBackend(messages);

        for (let msg of messages) {
        if (msg.isImage && msg.messageId) {
            try {
            const imagesDir = await roomDir.getDirectoryHandle('images', { create: false });
            const imageFileName = `${msg.messageId}.png`;
            const imageFileHandle = await imagesDir.getFileHandle(imageFileName, { create: false });
            const file = await imageFileHandle.getFile();
            const arrayBuffer = await file.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);
            let binary = '';
            for (let i = 0; i < uint8Array.length; i++) {
                binary += String.fromCharCode(uint8Array[i]);
            }
            const base64 = btoa(binary);
            msg.message = base64;
            } catch (error) {
            console.warn(`Could not load image for message ${msg.messageId}:`, error);
            sendLogToBackend(`Could not load image for message ${msg.messageId}: ${error}`);
            msg.message = null;
            }
        }
        if (msg.attachments && msg.attachments.length > 0) {
            msg.attachments.files = [];
            const attachmentsDir = await roomDir.getDirectoryHandle('attachments', { create: false });
            for (let att of msg.attachments) {
            console.log(att);
            const fileName = att.name;
            const ext = att.ext;
            const fileHandle = await attachmentsDir.getFileHandle(`${fileName}`, { create: false });
            const file = await fileHandle.getFile();
            const renamedFile = new File([file], att.name.substring(37), { type: file.type });
            msg.attachments.files.push(renamedFile);
            }
        }
        }

        console.log('Loaded chats');
        sendLogToBackend(`Loaded chats`);
        return messages.filter((msg) => msg.roomId === roomId);
    } catch (error) {
        console.warn('No local messages or error reading file:', error);
        sendLogToBackend(`No local messages or error reading file: ${error}`);
        return [];
    }
    }

    async function fetchRoomsLocal() {
    let uniqueRooms = [];
    if (directoryHandle) {
        try {
        const roomsFileHandle = await directoryHandle.getFileHandle('rooms.json', { create: false });
        const file = await roomsFileHandle.getFile();
        const text = await file.text();
        uniqueRooms = JSON.parse(text) || [];
        console.log("uniqueRooms: ", uniqueRooms);

        } catch (error) {
        console.warn('No local rooms metadata or error:', error);
        sendLogToBackend(`No local rooms metadata or error: ${error}`);
        uniqueRooms = [];
        }
    } else {
        uniqueRooms = [];
    }
    return uniqueRooms;
    }

    async function saveRoomMetadata(roomId, roomName, latestTimestamp) {
    if (!directoryHandle) return;
    try {
        const roomsFileHandle = await directoryHandle.getFileHandle('rooms.json', { create: true });
        let rooms = [];
        try {
        const file = await roomsFileHandle.getFile();
        const text = await file.text();
        if (text) rooms = JSON.parse(text) || [];
        } catch (error) {
        console.warn('No existing rooms metadata or invalid JSON:', error);
        sendLogToBackend(`No existing rooms metadata or invalid JSON: ${error}`);
        }
        const roomIndex = rooms.findIndex((r) => r.roomId === roomId);
        const combinedName = `${roomId}_${roomName}`; // Combined name for reference
        if (roomIndex >= 0) {
        rooms[roomIndex] = { roomId, roomName: roomName, latestTimestamp }; // Store combined name as roomName
        } else {
        rooms.push({ roomId, roomName: roomName, latestTimestamp }); // Store combined name as roomName
        }
        const writable = await roomsFileHandle.createWritable();
        await writable.write(JSON.stringify(rooms, null, 2));
        await writable.close();
    } catch (error) {
        console.error('Error saving room metadata:', error);
        sendLogToBackend(`Error saving room metadata: ${error}`);
    }
    }

    async function selectLocalDir() {
    try {
        directoryHandle = await window.showDirectoryPicker();

        saveStatus.style.display = 'inline';
        saveStatus.textContent = `Current local folder: ${directoryHandle.name}`;
    } catch (error) {
        console.error('Error selecting directory:', error);
        sendLogToBackend(`Error selecting directory: ${error}`);
        saveStatus.textContent = 'Failed to select directory';
        directoryHandle = null;
        setTimeout(() => { saveStatus.textContent = ''; }, 3000);
    }
    updateEditSaveDirBtnVisibility();
    }

    //--------- GCP functions ---------:
    async function saveChatGCP(messageData) {
    try {
        await fetch(`${baseUrl_gcp}/save-chat-GCP`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(messageData),
        });
    } catch (error) {
        console.error('Error saving chat:', error);
        sendLogToBackend(`Error saving chat: ${error}`);
    }
    }

    async function loadChatGCP(roomId) {
    try {
        const response = await fetch(
        `${baseUrl_gcp}/get-chat-history-GCP/${roomId}?customerId=${encodeURIComponent(CUSTOMER_ID)}`,
        {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
        }
        );

        if (!response.ok) throw new Error('Failed to fetch chat history');
        const { history } = await response.json();
        return history;
    } catch (error) {
        console.error('Error loading chat history (cloud):', error);
        sendLogToBackend(`Error loading chat history (cloud): ${error}`);
        return [];
    }
    }

    async function fetchRoomsGCP() {
    let uniqueRooms = [];
    try {
        const response = await fetch(`${baseUrl_gcp}/get-chat-rooms-GCP/${CUSTOMER_ID}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        });
        if (!response.ok) throw new Error('Failed to fetch room data');
        const { history } = await response.json();

        console.log(history);
        sendLogToBackend(history);

        const roomMap = new Map();
        history.forEach(msg => {
        if (msg.roomId && msg.roomName) {
            roomMap.set(msg.roomId, {
            roomId: msg.roomId,
            roomName: msg.roomName,
            latestTimestamp: msg.latestMessage
            });
        }
        });
        uniqueRooms = Array.from(roomMap.values());

        return uniqueRooms;

    } catch (error) {
        console.error('Error fetching rooms from cloud:', error);
        sendLogToBackend(`Error fetching rooms from cloud: ${error}`);
        return [];
    }
    }

    //--------- Dropbox functions ---------
    async function saveChatDB(messageData) {
    const selectedFolderPath = sessionStorage.getItem('selectedDropboxFolder') || `/${messageData.customerId}`;
    try {
        const formData = new FormData();
        formData.append('messageData', JSON.stringify(messageData));

        if (messageData.attachments && messageData.attachments.length > 0) {
        messageData.attachments.forEach((attachment, index) => {
            formData.append(`attachment${index}`, attachment);
        });
        }

        const response = await fetch(`${baseUrl_gcp}/save-chat-DB?targetFolder=${encodeURIComponent(selectedFolderPath)}`, {
        method: 'POST',
        body: formData,
        });
        if (!response.ok) throw new Error('Failed to save chat');
        return await response.json();
    } catch (error) {
        console.error('Error saving chat:', error);
        sendLogToBackend(`Error saving chat: ${error}`);
        throw error;
    }
    }

    async function loadChatDB(roomId) {
    const selectedFolderPath = sessionStorage.getItem('selectedDropboxFolder') || `/${CUSTOMER_ID}`;
    try {
        const response = await fetch(
        `${baseUrl_gcp}/get-chat-history-DB/${roomId}?customerId=${encodeURIComponent(CUSTOMER_ID)}&targetFolder=${encodeURIComponent(selectedFolderPath)}`,
        {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
        }
        );
        if (!response.ok) throw new Error('Failed to fetch chat history');
        const { history } = await response.json();
        for (const msg of history) {
        if (msg.attachments && msg.attachments.length > 0) {
            //to edit
        }
        }
        return history || [];
    } catch (error) {
        console.error('Error loading chat history (cloud):', error);
        return [];
    }
    }

    async function fetchRoomsDB() {
    try {
        const selectedFolderPath = sessionStorage.getItem('selectedDropboxFolder') || `/${CUSTOMER_ID}`;
        const response = await fetch(`${baseUrl_gcp}/get-chat-rooms-DB/${CUSTOMER_ID}?targetFolder=${encodeURIComponent(selectedFolderPath)}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        });
        if (!response.ok) throw new Error('Failed to fetch room data');
        const { rooms } = await response.json();
        return rooms || [];
    } catch (error) {
        console.error('Error fetching rooms from cloud:', error);
        sendLogToBackend(`Error fetching rooms from cloud: ${error}`);
        return [];
    }
    }

    //# Save chat message
    async function saveChatMessage(message, from, now, model = null, isImage, msgId = null) {
    const uniqueId = msgId ? msgId : await getUniqueId();
    const messageData = {
        messageId: uniqueId,
        customerId: CUSTOMER_ID,
        timestamp: now,
        message,
        roomId: currentRoomId,
        roomName: currentRoom,
        from,
        model,
        isImage,
        attachments: attachedFiles,
    };
    console.log(JSON.stringify(messageData));
    sendLogToBackend(JSON.stringify(messageData));

    if (storageMode == 'GCP') {
        //to cloud (v3)
        await saveChatGCP(messageData);
    }
    else if (storageMode == 'DB') {
        //to dropbox (v11)
        await saveChatDB(messageData);
    }
    else if (storageMode == 'local') {
        //to local (v7)
        await saveMessageLocally(messageData);
        await saveRoomMetadata(currentRoomId, currentRoom, now);
    }
    }


    //# Load chat history
    async function loadChatHistory(roomId) {

    chatHistory = [];
    userHistory = [];
    limitedHistory = [];
    limitedUserHistory = [];

    while (messagesDiv.firstChild) {
        messagesDiv.removeChild(messagesDiv.firstChild);
    }

    let roomHistory = [];

    if (storageMode == 'GCP') {
        //# from cloud (v3)
        roomHistory = await loadChatGCP(roomId);
    }
    else if (storageMode == 'DB') {
        //# from dropbox (v11)
        roomHistory = await loadChatDB(roomId);
    }
    else if (storageMode == 'local') {
        //# from local (v7)
        roomHistory = await loadMessagesLocally(roomId);
    }

    roomHistory = roomHistory.filter((msg) => msg.roomId === roomId);
    for (const msg of roomHistory.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))) {
        await addMessage(msg.message, msg.from === 'user', msg.timestamp, msg.model, msg.isImage, true, msg.attachments ? msg.attachments.files : null);
    }
    console.log(JSON.stringify({ chat_history: chatHistory, user_history: userHistory }));
    sendLogToBackend(JSON.stringify({ chat_history: chatHistory, user_history: userHistory }));
    }

    //# get rooms
    async function fetchRooms() {
    let uniqueRooms = [];
    const defaultRoom = [{ roomId: await getUniqueId(), roomName: 'general', timestamp: null }];

    if (storageMode === 'GCP') {
        uniqueRooms = await fetchRoomsGCP();
    } else if (storageMode == 'DB') {
        uniqueRooms = await fetchRoomsDB();
    } else if (storageMode === 'local') {
        uniqueRooms = await fetchRoomsLocal();
    } else {
        uniqueRooms = defaultRoom;
    }

    if (!uniqueRooms || uniqueRooms.length <= 0) {
        uniqueRooms = defaultRoom;
    }

    console.log(JSON.stringify(uniqueRooms));
    sendLogToBackend(JSON.stringify(uniqueRooms));

    uniqueRooms.sort((a, b) => {
        const dateA = new Date(a.latestTimestamp);
        const dateB = new Date(b.latestTimestamp);
        return dateB - dateA;
    });

    currentRoomId = uniqueRooms[0].roomId;
    currentRoom = uniqueRooms[0].roomName;

    console.log('currentRoomId: ', currentRoomId, 'currentRoom: ', currentRoom);
    sendLogToBackend(`currentRoomId: ${currentRoomId}, currentRoom: ${currentRoom}`);

    const roomList = document.getElementById('room-list');
    roomList.innerHTML = '';
    uniqueRooms.forEach((room, idx) => {
        const li = document.createElement('li');
        li.classList.add('room-item');
        if (idx === 0) li.classList.add('active');
        li.setAttribute('data-room-id', room.roomId);
        li.setAttribute('data-room-name', room.roomName);

        // Create room name span
        const roomNameSpan = document.createElement('span');
        roomNameSpan.textContent = room.roomName;

        // Create delete button
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Ã—';
        deleteButton.classList.add('delete-room-btn');
        deleteButton.setAttribute('data-room-id', room.roomId);
        deleteButton.addEventListener('click', async (e) => {
        e.stopPropagation(); // Prevent triggering room selection
        const roomIdToDelete = e.target.getAttribute('data-room-id');
        await deleteRoom(roomIdToDelete);
        });

        // Append name and button to li
        li.appendChild(roomNameSpan);
        li.appendChild(deleteButton);

        addRoomLatestTime(room.latestTimestamp, li);
        roomList.appendChild(li);
    });

    await loadChatHistory(currentRoomId);
    }

    // Main function to delete a room based on storage mode
    async function deleteRoom(roomId) {
    const rooms = document.querySelectorAll('.room-item');

    console.log('here');
    console.log(rooms);

    if (rooms.length <= 1) {
        console.log('Cannot delete this room!');
        return;
    }

    if (!confirm(`Are you sure you want to delete the room with ID ${roomId}?`)) {
        console.log('Deletion cancelled by user');
        return;
    }

    try {
        if (messagesDiv.childElementCount === 0) {
        // Skip
        } else if (storageMode === 'GCP') {
        await deleteRoomGCP(roomId);
        } else if (storageMode === 'DB') {
        await deleteRoomDB(roomId);
        } else if (storageMode === 'local') {
        await deleteRoomLocal(roomId);
        }

        // Remove room from the UI
        const roomItem = document.querySelector(`.room-item[data-room-id="${roomId}"]`);
        if (roomItem) roomItem.remove();
        roomList = document.getElementById('room-list');

        // If the deleted room was the current room, switch to another room
        if (currentRoomId === roomId) {
        const remainingRooms = document.querySelectorAll('.room-item');
        if (remainingRooms.length > 0) {
            const firstRoom = remainingRooms[0];
            document.querySelectorAll('.room-item.active').forEach((item) => item.classList.remove('active'));
            firstRoom.classList.add('active');
            currentRoomId = firstRoom.getAttribute('data-room-id');
            currentRoom = firstRoom.getAttribute('data-room-name');
            await loadChatHistory(currentRoomId);
        } else {
            currentRoomId = null;
            currentRoom = null;
        }
        }
        console.log(`Room ${roomId} deleted successfully`);
        sendLogToBackend(`Room ${roomId} deleted successfully`);
    } catch (error) {
        console.error('Error deleting room:', error);
        sendLogToBackend(`Error deleting room: ${error}`);
        alert('Failed to delete room. Please try again.');
    }
    }

    // Delete room for Local Storage
    async function deleteRoomLocal(roomId) {
    if (!directoryHandle) {
        console.warn('No directory selected for local storage');
        sendLogToBackend('No directory selected for local storage');
        return;
    }
    try {
        let roomDirName = null;
        const roomEntries = directoryHandle.entries(); // Returns an async iterator
        for await (const [name, handle] of roomEntries) {
        console.log(name);
        if (handle.kind === 'directory' && name.startsWith(roomId + '_')) {
            roomDirName = name; // Use the full combined name (e.g., "room123_MyRoom")
            break;
        }
        }
        if (!roomDirName) {
        console.warn(`No directory found for roomId ${roomId}`);
        sendLogToBackend(`No directory found for roomId ${roomId}`);
        return [];
        }

        const roomDirHandle = await directoryHandle.getDirectoryHandle(roomDirName, { create: false });
        await roomDirHandle.remove({ recursive: true });

        // Update rooms.json by removing the deleted room
        const roomsFileHandle = await directoryHandle.getFileHandle('rooms.json', { create: false });
        let rooms = [];
        try {
        const file = await roomsFileHandle.getFile();
        const text = await file.text();
        if (text) rooms = JSON.parse(text) || [];
        } catch (error) {
        console.warn('No existing rooms metadata or invalid JSON:', error);
        }
        rooms = rooms.filter((room) => room.roomId !== roomId);
        const writable = await roomsFileHandle.createWritable();
        await writable.write(JSON.stringify(rooms, null, 2));
        await writable.close();

        console.log(`Room ${roomId} deleted from local storage`);
        sendLogToBackend(`Room ${roomId} deleted from local storage`);
    } catch (error) {
        console.error(`Error deleting room ${roomId} from local storage:`, error);
        sendLogToBackend(`Error deleting room ${roomId} from local storage: ${error}`);
        throw error;
    }
    }

    // Delete room for GCP
    async function deleteRoomGCP(roomId) {
    const response = await fetch(
        `${baseUrl_gcp}/delete-room-GCP/${roomId}?customerId=${encodeURIComponent(CUSTOMER_ID)}`,
        {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        }
    );
    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to delete room from GCP: ${errorText}`);
    }
    console.log(`Room ${roomId} deleted from GCP`);
    sendLogToBackend(`Room ${roomId} deleted from GCP`);
    }

    // Delete room for Dropbox
    async function deleteRoomDB(roomId) {
    const selectedFolderPath = sessionStorage.getItem('selectedDropboxFolder') || `/${CUSTOMER_ID}`;
    const response = await fetch(
        `${baseUrl_gcp}/delete-room-DB/${roomId}?customerId=${encodeURIComponent(
        CUSTOMER_ID
        )}&targetFolder=${encodeURIComponent(selectedFolderPath)}`,
        {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        }
    );
    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to delete room from Dropbox: ${errorText}`);
    }
    console.log(`Room ${roomId} deleted from Dropbox`);
    sendLogToBackend(`Room ${roomId} deleted from Dropbox`);
    }
</script>

<!-- 
  ==================================================================
  PART 1: EXTERNAL LIBRARIES (CDN)
  These load the Marked.js, Prism.js, and Prism Autoloader libraries.
  ==================================================================
-->
<script src="https://cdn.jsdelivr.net/npm/marked@12.0.0/marked.min.js" defer></script>
<link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js" defer></script>

<!-- 
  ==================================================================
  PART 2: JAVASCRIPT LOGIC
  This contains the corrected function to render markdown and add
  working "Copy" buttons.
  ==================================================================
-->
<script>
    /**
     * Renders a markdown string into a target DOM element, then finds and
     * enhances code blocks with syntax highlighting and a working "Copy" button.
     *
     * @param {HTMLElement} targetElement The container element where the HTML will be rendered.
     * @param {string} markdownContent The raw markdown string to process.
     */
    function renderMarkdownInElement(targetElement, markdownContent) {
      // 1. Validate that the target element exists on the page.
      if (!targetElement) {
        console.error("Markdown Render Error: The target element was not found.");
        return;
      }

      try {
        // 2. Check if the Marked.js library is loaded.
        if (typeof marked === 'undefined') {
          // Fallback: display the content as plain text if Marked.js is missing.
          targetElement.textContent = markdownContent;
          console.warn("Marked.js is not loaded. Displaying content as plain text.");
          return;
        }

        // Configure Marked.js
        marked.setOptions({
          breaks: true,
          gfm: true,
          sanitize: false,
          smartLists: true,
          smartypants: true,
          headerIds: false,
          mangle: false
        });
        
        // 3. Convert markdown to HTML and inject it directly into the target element.
        // This makes the content "live" on the page.
        targetElement.innerHTML = marked.parse(markdownContent);
        
        // 4. Check if the Prism.js syntax highlighter library is loaded.
        if (typeof Prism !== 'undefined') {
          // Find all code blocks (<pre><code>...</code>) within the newly added content.
          targetElement.querySelectorAll('pre code').forEach(block => {
            // Apply syntax highlighting.
            Prism.highlightElement(block);

            const pre = block.parentElement;
            
            // 5. Create and add the "Copy" button.
            // This works because we are adding it to a live DOM element.
            if (pre && !pre.querySelector('.copy-code-btn')) {
              const btn = document.createElement('button');
              btn.className = 'copy-code-btn';
              btn.textContent = 'Copy';
              
              // 6. Attach the click event listener. This will not be lost.
              btn.addEventListener('click', async () => {
                // The block.textContent contains the raw code to be copied.
                if (!navigator.clipboard) {
                    btn.textContent = 'HTTPS needed';
                    setTimeout(() => { btn.textContent = 'Copy'; }, 2000);
                    return;
                }
                try {
                  await navigator.clipboard.writeText(block.textContent);
                  btn.textContent = 'Copied!';
                  setTimeout(() => { btn.textContent = 'Copy'; }, 2000);
                } catch (err) {
                  console.error('Failed to copy code to clipboard: ', err);
                  btn.textContent = 'Failed';
                  setTimeout(() => { btn.textContent = 'Copy'; }, 2000);
                }
              });

              // Style the parent <pre> tag to position the button correctly.
              pre.style.position = 'relative';
              pre.appendChild(btn);
            }
          });
        }
        
      } catch (error) {
        console.error("An error occurred during markdown rendering:", error);
        // As a safe fallback, display the original content as plain text.
        targetElement.textContent = markdownContent;
      }
    }
</script>

<!-- 
  ==================================================================
  PART 3: CSS STYLING
  This is the CSS you provided for styling the markdown and code blocks.
  It is unchanged.
  ==================================================================
-->
<style>
 /* Compact Markdown Styling */
  .chatbot-message.bot h1,.chatbot-message.bot h2,.chatbot-message.bot h3,.chatbot-message.bot h4,.chatbot-message.bot h5,.chatbot-message.bot h6 { margin: 16px 0 8px 0; font-weight: bold; line-height: 1.3; }
  .chatbot-message.bot h1 { font-size: 1.5em; } .chatbot-message.bot h2 { font-size: 1.3em; } .chatbot-message.bot h3 { font-size: 1.2em; }
  .chatbot-message.bot p { margin: 8px 0; line-height: 1.5; }
  .chatbot-message.bot ul,.chatbot-message.bot ol { margin: 8px 0; padding-left: 20px; }
  .chatbot-message.bot li { margin: 4px 0; line-height: 1.4; }
  .chatbot-message.bot blockquote { border-left: 4px solid #007bff; margin: 12px 0; padding: 8px 0 8px 16px; background: rgba(0,123,255,0.05); border-radius: 0 4px 4px 0; font-style: italic; }
  .chatbot-message.bot code { background: rgba(0,0,0,0.1); border-radius: 3px; padding: 2px 4px; font-family: Monaco, monospace; font-size: 0.9em; }
  .chatbot-message.bot pre { background: rgba(0,0,0,0.05); border: 1px solid rgba(0,0,0,0.1); border-radius: 6px; padding: 12px; margin: 12px 0; overflow-x: auto; font-family: Monaco, monospace; font-size: 0.9em; line-height: 1.4; }
  .chatbot-message.bot pre code { background: none; padding: 0; font-size: inherit; }
  .chatbot-message.bot strong { font-weight: bold; } .chatbot-message.bot em { font-style: italic; }
  .chatbot-message.bot a { color: #007bff; text-decoration: underline; } .chatbot-message.bot a:hover { color: #0056b3; text-decoration: none; }
  .chatbot-message.bot table { border-collapse: collapse; margin: 12px 0; width: 100%; font-size: 0.9em; }
  .chatbot-message.bot th,.chatbot-message.bot td { border: 1px solid rgba(0,0,0,0.2); padding: 6px 12px; text-align: left; }
  .chatbot-message.bot th { background: rgba(0,0,0,0.1); font-weight: bold; }
  .chatbot-message.bot hr { border: none; border-top: 1px solid rgba(0,0,0,0.2); margin: 16px 0; }
  .chatbot-message.bot > *:first-child { margin-top: 0; } .chatbot-message.bot > *:last-child { margin-bottom: 0; }

  /* Custom syntax highlighting styles for code blocks */
  .chatbot-message.bot pre[class*="language-"] {
    background: rgba(0, 0, 0, 0.03) !important;
    border: 1px solid rgba(0, 0, 0, 0.1) !important;
    border-radius: 8px !important;
    padding: 16px !important;
    margin: 12px 0 !important;
    overflow-x: auto;
    font-size: 0.85em !important;
    line-height: 1.5 !important;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
  }
  
  .chatbot-message.bot code[class*="language-"] {
    background: none !important;
    color: inherit;
    text-shadow: none !important;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace !important;
  }
  
  /* Copy button for code blocks */
  .chatbot-message.bot pre {
    position: relative;
  }
  
  .copy-code-btn {
    position: absolute;
    top: 8px;
    right: 8px;
    background: rgba(0, 0, 0, 0.1);
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s;
    z-index: 1;
  }
  
  .copy-code-btn:hover {
    opacity: 1;
    background: rgba(0, 0, 0, 0.2);
  }

  @media (max-width: 768px) {
    .chatbot-container {
      margin: 10px auto;
      border-radius: 0;
    }
    .chatbot-messages {
      max-height: 50vh;
    }
  } 
</style>


<!-- 
  ==================================================================
  PART 4: EXAMPLE USAGE
  This shows how to call the new function from your other JavaScript.
  You can adapt this logic to your chatbot's code.
  ==================================================================
-->



<!-- 20250919: update different functions -->

<script>
    

    async function sendLogToBackend(log) {
        //   try {
        //     await fetch(`${baseUrl_tokens}/logs`, {
        //       method: 'POST',
        //       headers: { 'Content-Type': 'application/json' },
        //       body: JSON.stringify({ log }),
        //     });
        //   } catch (error) {
        //     console.log(error);
        //   }
    }

    //#get a unique identifier (v6)
    async function getUniqueId() {
        try {
            const response = await fetch(`${baseUrl_ai}/uuid`);
            const uniqueId = await response.json();
            return uniqueId.uniqueId;
        } catch (error) {
            console.error('Error getting uuid:', error);
            sendLogToBackend(`Error getting uuid: ${error}`);
        }
    }

    function calculateTokenConsumption(inputTokens, outputTokens, currencyChosen, calculatedCostFromBot) {
        console.log('currencies: ', currencies);
        const rates = currencies;
        const appliedRate = rates[currencyChosen];
        const costCurrencyRate = rates[currentBot.currency];

        const inputCost = currentBot.inputTokenPrice;
        const outputCost = currentBot.outputTokenPrice;
        const minBotCost = (currentBot.cost / costCurrencyRate) * appliedRate;

        if (currentBot.fixedCostFlag == 1) return minBotCost;

        const calculatedCost = calculatedCostFromBot
            ? (calculatedCostFromBot / costCurrencyRate) * appliedRate
            : (((inputTokens / 1000000.0) * inputCost + (outputTokens / 1000000.0) * outputCost) / costCurrencyRate) *
            appliedRate;

        let highestCost = 0.005;

        if (isValidNumber(currentBot.cost) && minBotCost > highestCost) {
            highestCost = minBotCost;
        }
        if (isValidNumber(calculatedCost) && calculatedCost > highestCost) {
            highestCost = calculatedCost;
        }

        console.log('inputTokens: ', inputTokens);
        console.log('outputTokens: ', outputTokens);
        console.log('inputCost: ', inputCost);
        console.log('outputCost: ', outputCost);
        console.log('appliedRate: ', appliedRate);
        console.log('costCurrencyRate: ', costCurrencyRate);
        console.log('Calculated cost: ', calculatedCost);
        console.log('Provided cost from bot: ', calculatedCostFromBot);
        console.log('Minimum bot cost (adapted to customer currency): ', minBotCost);
        console.log('Minimum: 0.005');
        console.log('highestCost: ', highestCost);

        return highestCost;
    }
  
    async function getIPadress() {
          
        
        let ipAdress = '';

        await fetch('https://api.ipify.org?format=json')
            .then(response => response.json())
            .then(data => {
                  
                
                ipAdress = data.ip;

            });
        return ipAdress;
    }
  

    async function getHTMLformat(text) {
        try {
            const response = await fetch(`${baseUrl_ai}/formatHTML`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text }),
            });
            const data = await response.json();
            return data.cleanHtml || '';
        } catch (error) {
            console.error('Error getting html font:', error);
        }
    }

    function isValidNumber(value) {
        return typeof value === "number" && !isNaN(value);
    }

    function customRound(number, decimals = 0) {
        // Convert to string and split into integer and decimal parts
        let numStr = number.toString();
        let [integerPart, decimalPart = '0'] = numStr.split('.');

        // Handle negative numbers
        const isNegative = integerPart.startsWith('-');
        if (isNegative) {
            integerPart = integerPart.slice(1); // Remove negative sign for processing
        }

        // Convert integer part to number
        let intValue = parseInt(integerPart, 10);

        if (decimals === 0) {
            // Round to nearest integer
            if (decimalPart.length > 0) {
                let firstDigit = parseInt(decimalPart[0], 10);
                if (firstDigit >= 5) {
                    intValue += 1;
                }
            }
        } else {
            // Round to specified decimal places
            let decimalToCheck = decimalPart.length > decimals ? parseInt(decimalPart[decimals], 10) : 0;
            let currentDecimal = decimalPart.slice(0, decimals) || '0';
            if (decimalToCheck >= 5 && decimalPart.length > decimals) {
                let incremented = (parseInt(currentDecimal, 10) + 1).toString();
                if (incremented.length > decimals) {
                    let carry = incremented[0];
                    let newDecimal = incremented.slice(1).padEnd(decimals, '0');
                    intValue += parseInt(carry, 10);
                    currentDecimal = newDecimal;
                } else {
                    currentDecimal = incremented.padEnd(decimals, '0');
                }
            } else {
                currentDecimal = currentDecimal.padEnd(decimals, '0');
            }
            return isNegative ? `-${intValue}.${currentDecimal}` : `${intValue}.${currentDecimal}`;
        }

        // Return rounded integer
        return isNegative ? -intValue : intValue;
    }

</script>

<script>
    //------------------------------------------------:
    async function sendLogToBackend(log) {
    try {
        await fetch(`${baseUrl_tokens}/logs`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ log }),
        });
    } catch (error) {
        console.log(error);
    }
    }

    async function loadMessagesLocally(roomId) {
    if (!directoryHandle) {
        console.warn('No directory selected for local loading');
        sendLogToBackend(`No directory selected for local loading`);
        return [];
    }
    try {
        // Find the directory with the combined name
        let roomDirName = null;
        const roomEntries = directoryHandle.entries(); // Returns an async iterator
        for await (const [name, handle] of roomEntries) {
        console.log(name);
        if (handle.kind === 'directory' && name.startsWith(roomId + '_')) {
            roomDirName = name; // Use the full combined name (e.g., "room123_MyRoom")
            break;
        }
        }
        if (!roomDirName) {
        console.warn(`No directory found for roomId ${roomId}`);
        sendLogToBackend(`No directory found for roomId ${roomId}`);
        return [];
        }

        const roomDir = await directoryHandle.getDirectoryHandle(roomDirName, { create: false });
        console.log(currentRoom);
        sendLogToBackend(currentRoom);
        const fileHandle = await roomDir.getFileHandle('chat.json', { create: false });
        const file = await fileHandle.getFile();
        const text = await file.text();
        const messages = JSON.parse(text) || [];

        console.log(messages);
        sendLogToBackend(messages);

        for (let msg of messages) {
        if (msg.isImage && msg.messageId) {
            try {
            const imagesDir = await roomDir.getDirectoryHandle('images', { create: false });
            const imageFileName = `${msg.messageId}.png`;
            const imageFileHandle = await imagesDir.getFileHandle(imageFileName, { create: false });
            const file = await imageFileHandle.getFile();
            const arrayBuffer = await file.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);
            let binary = '';
            for (let i = 0; i < uint8Array.length; i++) {
                binary += String.fromCharCode(uint8Array[i]);
            }
            const base64 = btoa(binary);
            msg.message = base64;
            } catch (error) {
            console.warn(`Could not load image for message ${msg.messageId}:`, error);
            sendLogToBackend(`Could not load image for message ${msg.messageId}: ${error}`);
            msg.message = null;
            }
        }
        if (msg.attachments && msg.attachments.length > 0) {
            msg.attachments.files = [];
            const attachmentsDir = await roomDir.getDirectoryHandle('attachments', { create: false });
            for (let att of msg.attachments) {
            console.log(att);
            const fileName = att.name;
            const ext = att.ext;
            const fileHandle = await attachmentsDir.getFileHandle(`${fileName}`, { create: false });
            const file = await fileHandle.getFile();
            const renamedFile = new File([file], att.name.substring(37), { type: file.type });
            msg.attachments.files.push(renamedFile);
            }
        }
        }

        console.log('Loaded chats');
        sendLogToBackend(`Loaded chats`);
        return messages.filter((msg) => msg.roomId === roomId);
    } catch (error) {
        console.warn('No local messages or error reading file:', error);
        sendLogToBackend(`No local messages or error reading file: ${error}`);
        return [];
    }
    }

    async function fetchRoomsLocal() {
    let uniqueRooms = [];

    if (directoryHandle) {
        try {
        const roomsFileHandle = await directoryHandle.getFileHandle('rooms.json', { create: false });
        const file = await roomsFileHandle.getFile();
        const text = await file.text();
        uniqueRooms = JSON.parse(text) || [];
        console.log('uniqueRooms: ', uniqueRooms);
        } catch (error) {
        console.warn('No local rooms metadata or error:', error);
        sendLogToBackend(`No local rooms metadata or error: ${error}`);
        uniqueRooms = [];
        }
    } else {
        uniqueRooms = [];
    }
    return uniqueRooms;
    }

    async function fetchRooms() {
    let uniqueRooms = [];
    const defaultRoom = [{ roomId: await getUniqueId(), roomName: 'general', timestamp: null }];

    console.log("fetch room in progress");
    if (storageMode === 'GCP') {
        uniqueRooms = await fetchRoomsGCP();
    } else if (storageMode == 'DB') {
        uniqueRooms = await fetchRoomsDB();
    } else if (storageMode === 'local') {
        console.log("fetch room for local");
        uniqueRooms = await fetchRoomsLocal();
    } else {
        uniqueRooms = defaultRoom;
    }
    
    if (!uniqueRooms || uniqueRooms.length <= 0) {
        uniqueRooms = defaultRoom;
    }

    console.log(JSON.stringify(uniqueRooms));
    sendLogToBackend(JSON.stringify(uniqueRooms));

    uniqueRooms.sort((a, b) => {
        const dateA = new Date(a.latestTimestamp);
        const dateB = new Date(b.latestTimestamp);
        return dateB - dateA;
    });

    currentRoomId = uniqueRooms[0].roomId;
    currentRoom = uniqueRooms[0].roomName;

    console.log('currentRoomId: ', currentRoomId, 'currentRoom: ', currentRoom);
    sendLogToBackend(`currentRoomId: ${currentRoomId}, currentRoom: ${currentRoom}`);

    const roomList = document.getElementById('room-list');
    roomList.innerHTML = '';
    uniqueRooms.forEach((room, idx) => {
        const li = document.createElement('li');
        li.classList.add('room-item');
        if (idx === 0) li.classList.add('active');
        li.setAttribute('data-room-id', room.roomId);
        li.setAttribute('data-room-name', room.roomName);

        // Create room name span
        const roomNameSpan = document.createElement('span');
        roomNameSpan.textContent = room.roomName;

        // Create delete button
        const deleteButton = document.createElement('button');
        deleteButton.textContent = '×';
        deleteButton.classList.add('delete-room-btn');
        deleteButton.setAttribute('data-room-id', room.roomId);
        deleteButton.addEventListener('click', async (e) => {
        e.stopPropagation(); // Prevent triggering room selection
        const roomIdToDelete = e.target.getAttribute('data-room-id');
        await deleteRoom(roomIdToDelete);
        });

        // Append name and button to li
        li.appendChild(roomNameSpan);
        li.appendChild(deleteButton);

        addRoomLatestTime(room.latestTimestamp, li);
        roomList.appendChild(li);
    });

    await loadChatHistory(currentRoomId);
    }
</script>

<!-- 20250904: update + storage change -->

<style>
/* Combined CSS with priority to changing.css definitions */

/* Global reset for box model */
.chatbot-container,
.chatbot-container *,
.chatbot-container *::before,
.chatbot-container *::after {
  box-sizing: border-box;
}

/* New responsive and centered container */
.chatbot-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  max-width: 800px;
  margin: 20px auto;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  background: white;
  min-height: 400px;
}

/* New container for the elements below the main chat window */
.bottom-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
}

/* Main chat window */
.chatbot-window {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  min-height: 400px;
}

/* Chat messages section */
.chatbot-messages {
  flex: 1;
  min-height: 300px;
  max-height: 60vh;
  padding: 15px;
  overflow-y: auto;
  background: #f9f9f9;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.chatbot-message {
  max-width: 70%;
  padding: 12px 18px;
  border-radius: 18px;
  font-size: 1.25rem;
  line-height: 1.4;
  word-break: break-word;
  margin-bottom: 4px;
  display: inline-block;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
  position: relative;
  clear: both;
  transition: background 0.2s;
}

.chatbot-message.user {
  background: #8d0033;
  color: #fff;
  align-self: flex-end;
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 18px;
  border-top-left-radius: 18px;
  border-top-right-radius: 18px;
}

.chatbot-message.bot {
  background: #cbcbcb;
  color: #222;
  align-self: flex-start;
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 18px;
  border-top-left-radius: 18px;
  border-top-right-radius: 18px;
}

/* Input section */
.chatbot-input {
  display: flex;
  padding: 12px;
  border-top: 1px solid #eee;
  background: white;
}

.chatbot-input-container {
  border: 2px solid #a9a9a9;
  border-radius: 15px;
  background: white;
  transition: border-color 0.3s ease;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  min-height: 80px;
  flex: 1;
  box-sizing: border-box;
}

.chatbot-input-container:focus-within {
  border-color: #8d0033;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
}

.chatbot-input-field {
  width: 100% !important;
  border: none !important;
  outline: none !important;
  resize: none !important;
  font-family: inherit !important;
  font-size: 14px !important;
  line-height: 1.4 !important;
  background: transparent !important;
  box-sizing: border-box !important;
  height: auto !important;
  min-height: 20px !important;
  max-height: 150px !important;
  overflow-y: auto !important;
  padding: 15px;
}

.chatbot-button-row {
  display: flex;
  border-top: 1px solid #e9ecef;
  background: white;
  padding: 8px;
  gap: 8px;
  flex-wrap: nowrap; /* Prevents buttons from wrapping to a new line */
  min-height: 45px;
  align-items: center;
}

/* Specific button and selector styling */
.chatbot-attach,
.chatbot-send {
  flex-grow: 0;
  min-width: unset;
  padding: 6px 10px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s ease;
  white-space: nowrap;
}

.bot-selector {
  margin-left: 10px;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ababab;
  font-size: 1rem;
  width: auto;
  flex-shrink: 1; /* Allows the selector to shrink to fit */
  overflow: hidden; /* Hides any text that overflows the element */
  text-overflow: ellipsis; /* Adds an ellipsis (...) to indicate truncated text */
  margin-top: 0; /* Removes extra space from the top */
}

.chatbot-attach {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  color: #495057;
}

.chatbot-send {
  background: #007bff;
  border: 1px solid #007bff;
  color: white;
  font-weight: 600;
  margin-left: auto;
}

.mic-button {
  background: #28a745;
  border: 1px solid #28a745;
  color: white;
}

.bot-selector {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  color: #495057;
  outline: none;
}

.chatbot-send:disabled {
  background: #ccc !important;
  color: #888 !important;
  cursor: not-allowed !important;
  opacity: 0.7;
}

/* Chat rooms section moved below */
.chat-rooms-sidebar.room-selection {
  width: 100%;
  background: #f0f0f0;
  padding: 15px;
  border-right: none;
  border-bottom: 1px solid #ddd;
  min-height: unset;
  margin-top: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.chat-rooms-sidebar h3 {
  margin: 0 0 15px 0;
  color: #333;
  font-size: 1.2em;
  font-weight: 600;
}

.create-room-btn {
  width: 100%;
  padding: 10px;
  background: #8d0033;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 5px;
}

.room-list {
  list-style: none;
  padding: 0;
  margin: 0 0 10px 0;
  max-height: 200px;
  overflow-y: auto;
}

.room-item {
  padding: 10px;
  cursor: pointer;
  border-bottom: 1px solid #ddd;
  border-radius: 4px;
}

.room-item.active {
  background: #8d0033;
  color: white;
}

.room-item:hover {
  background: #e0e0e0;
}

/* New container for the buttons to manage their alignment */
.action-buttons-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  margin-top: 20px;
  width: 100%;
  max-width: 800px;
}

.action-buttons-container button,
.action-buttons-container label,
.action-buttons-container div {
  width: 100%;
  text-align: center;
}

/* Other miscellaneous styles */
.folder-inputs {
  display: flex;
  gap: 10px;
  margin-top: 10px;
}

.folder-input {
  flex: 1;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.folder-popup {
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.4);
  display: flex;
  align-items: center;
  justify-content: center;
}

.folder-popup-content {
  background-color: #fefefe;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;
  position: relative;
}

.close-popup {
  position: absolute;
  right: 15px;
  top: 10px;
  font-size: 24px;
  cursor: pointer;
}

.popup-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.use-folder-btn, .cancel-folder-btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.use-folder-btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #4CAF50;
  color: white;
  transition: background-color 0.3s ease;
}

.use-folder-btn:disabled {
  background-color: #cccccc;
  color: #666666;
  cursor: not-allowed;
}

.cancel-folder-btn {
  background-color: #f44336;
  color: white;
}

.view-folder-btn {
  padding: 8px 12px;
  background-color: #8d0033;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.view-folder-btn:disabled {
  background-color: #4CAF50;
  cursor: default;
}

.error {
  color: #f44336;
}

.error-message {
  color: #f44336;
  background-color: #ffebee;
  border-left: 4px solid #f44336;
  padding: 10px;
  margin: 5px 0;
}

.large-file {
  color: #f44336;
  font-weight: bold;
}

.folder-stats {
  margin-top: 10px;
}

.folder-stats ul {
  list-style-type: none;
  padding: 0;
}

.folder-stats li {
  margin: 5px 0;
}

.tokens-display {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 16px;
  flex-wrap: wrap;
  align-items: flex-start;
  padding: 15px;
  border-bottom: 1px solid #eee;
}

.edit-save-dir-btn {
  background: none;
  color: #8d0033;
  border: none;
  border-radius: 0;
  padding: 0 8px 0 0;
  cursor: pointer;
  font-size: 1em;
  text-decoration: underline;
  display: inline;
}

.edit-save-dir-btn:hover {
  color: #8d0033;
  text-decoration: underline;
}

.chatbot-file-icon {
  font-size: 1em;
  vertical-align: middle;
}

.chatbot-attachment span {
  font-size: 0.8em;
  vertical-align: middle;
  font-style: italic;
  margin-left: 2px;
  font-weight: 100;
}

.token-sidebar, .login-sidebar, .bot-sidebar, .snackbar {
  position: absolute;
  left: 50%;
  bottom: 100px;
  transform: translateX(-50%);
  width: 340px;
  border: 1.5px solid #f5c6cb;
  border-radius: 10px;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.13);
  padding: 22px 32px 22px 22px;
  z-index: 9999;
  font-size: 1.15rem;
  text-align: center;
  transition: opacity 0.3s;
  display: none;
  color: #ffdddd;
}

.token-sidebar {
  background: #a94442;
}

.login-sidebar {
  background: rgb(31, 98, 175);
}

.bot-sidebar {
  background: rgb(56, 200, 252);
}

.snackbar {
  background: #a94442;
}

.sidebar-close {
  position: absolute;
  top: 8px;
  right: 14px;
  font-size: 1.4rem;
  cursor: pointer;
  color: #ffdddd;
}

.chatbot-message p {
  margin: 0 0 0 0;
  line-height: 1.6;
}

.chatbot-message p:where(:only-child) {
  margin: 0;
}

.chatbot-message ul {
  list-style: disc;
  margin: 0 0 1em 20px;
  padding-left: 0;
}

.chatbot-message ol {
  list-style: decimal;
  margin: 0 0 1em 20px;
  padding-left: 0;
}

.chatbot-message li {
  margin-left: 20px;
  line-height: 1.6;
}

.room-item {
  justify-content: space-between;
  align-items: center;
  padding: 5px 10px;
  width: 100%;
  box-sizing: border-box;
}

.room-item span {
  flex-grow: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding-right: 5px;
}

.room-item .delete-room-btn {
  margin-left: 8px;
  padding: 2px 6px;
  background-color: #ff4d4d;
  color: white;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  flex-shrink: 0;
  min-width: 20px;
}

.room-item .delete-room-btn:hover {
  background-color: #cc0000;
}

.room-item span[style*='float: right'] {
  flex-shrink: 0;
  margin-left: 10px;
  color: #888;
  font-size: 0.95em;
  white-space: nowrap;
}

/* New CSS from previous version to revert the date styling */
.chatbot-message-time {
  font-size: 0.85em;
  color: #888;
  margin-top: 4px;
}

/* Responsive design */
@media (max-width: 768px) {
  .chatbot-container,
  .bottom-container {
    max-width: 100%;
    margin: 10px;
    border-radius: 0;
    box-shadow: none;
  }
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

@media (max-width: 768px) {
  .tokens-display {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .tokens-display > div {
    width: 100%;
  }

  .bot-selector {
    margin-top: 0; /* Ensures the element stays on the same line */
  }
}

</style>

<script type="text/javascript" src="https://www.dropbox.com/static/api/2/dropins.js" id="dropboxjs" data-app-key="1ck53klk0amnef6"></script>
<script src="https://accounts.google.com/gsi/client"></script>
<script src="https://apis.google.com/js/api.js"></script>
<script src="https://alcdn.msauth.net/browser/2.24.0/js/msal-browser.min.js"></script>
<script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.17/js/msal.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js"></script>

<!-- 20250919: update different functions -->


<script src="https://cdn.jsdelivr.net/gh/rain-yyy/Langya-AI/baidu-pan-api.js"></script> <!-- 🆕 新增：引入百度网盘API模块 -->
<script>
    // v3: hide async option and set as default when storeid is data-entry-test
    // v3: to fix onedrive folder picker
    // v4: 🆕 新增百度网盘支持

  //# variables init
  //v15
  let useOrNot = false;
  let CUSTOMER_ID = null;
  let attachedFiles = [];
  //v7
  //20250904: update + storage change
  //let storageMode = null;
  let storageMode = 'none';

  let sourceMode = null;
  let StorageModeSelector = null;
  let SourceModeSelector = null; 
  let directoryHandle = null;
  let lcdirectoryHandle = null;
  //v5
  let messagesDiv = null;
  let tokensDisplay = null;
  let creditAccountSelector = null;
  let botSelector = null;
  let userInput = '';
  let roomList = [];
  let saveStatus = null;
  let editSaveDirBtn = null;
  let sendButton = null;
  let createRoomBtn = null;
  let dbChooseFolderBtn = null;
  let botsList = [];
  let isDropboxLinked = false;

  // 🆕 新增：百度网盘相关变量
  let bdChooseFolderBtn = null;
  let bdChooseOutputBtn = null;
  let baiduPanManager = null;  // 使用新的管理器

  let thinkingInterval = null;
  let thinkingMessageDiv = null;
  //v5
  let chatHistory = [];
  let userHistory = [];
  let limitedHistory = [];
  let limitedUserHistory = [];
  //v6
  let currentRoomId = null;
  let currentRoom = null;
  //v7
  const storageModes = {
  //20250904: update + storage change
    
    none: 'Not Storing History',
    local: 'Local Storage'

  };
  // Hide premium local
  const sourceModes = {
    premium: 'Premium Dropbox',
    premiumd: 'Premium Drive',
    premiumod: 'Premium OneDrive',
    premiumbdpan: 'Premium Baidu Pan'  // 🆕 新增：百度网盘选项
  };
  // v20250816: move storeid out from fetching
  const storeId = 'data-entry-test';

  // Maps corresponding storage modes to their numerical representation
  const mapper = {
    'premiuml' : 1,
    'premium' : 2,
    'premiumd' : 3,
    'premiumod' : 4,
    'premiumbdpan' : 5  // 🆕 新增：百度网盘映射值
  }
  const langya_secret_key = "Z9Y8X7W6";
  // v20250816: use gdrivepicker
  // const GOOGLE_CLIENT_ID = ""; 
  //const GOOGLE_API_KEY = "";
  const email = "tianruifan21@gmail.com";
  console.log(`Email: ${email}`);
  
  // 🆕 新增：百度网盘配置常量
  const BAIDU_PAN_CONFIG = {
    // ⚠️ 重要：请将下面的 URL 替换为你的 Cloudflare Worker 地址
    // 示例：'https://your-worker.workers.dev/?url='
    corsProxyUrl: 'https://langyaai-cors.tianruifan21.workers.dev/?url=',  // ⚠️ 必须配置！
    // OAuth 回调地址（必须与百度开发者平台配置完全一致）
    // 建议使用固定的完整 URL，例如：'https://yourdomain.com/pages/your-page'
    redirectUri: window.location.href.split('#')[0].split('?')[0]  // 移除 hash 和 query 参数
  };
  
  //v5
  let currentBot = null;
  let botsCategories = [];

  //v18
  let creditAccounts = [];
  let currentCreditAccount = null;

  //v20
  let currencies = {};

  //v21
  let folderPopup = null;
  let closePopupBtn = null;
  let useFolderBtn = null;
  let cancelFolderBtn = null;
  let folderStats = null;
  let viewFolderBtn = null;
  let inputFolder = null;
  let outputFolder = null;

  let selectedFolderPath = null;
  let selectedFolderId = null;
  let googlePickerInitialized = false;
  let folderName = null;
  let folderId = null;
  let OutputFolderId = null;
  let outputfolderName = null;
  let asyncMode = false;
  let DataEntry = 0;

  const ONEDRIVE_REDIRECT_URI = window.location.origin + window.location.pathname;

  // 🆕 新增：初始化百度网盘管理器
  function initBaiduPanManager() {
    console.log('[BaiduPan] 初始化管理器...');
    
    if (!window.BaiduPanManager) {
      console.error('[BaiduPan] BaiduPanManager 未加载');
      showSnackbar('百度网盘模块加载失败', 'rgb(255, 100, 100)');
      return false;
    }
    
    // 创建管理器实例
    baiduPanManager = new window.BaiduPanManager({
      corsProxyUrl: BAIDU_PAN_CONFIG.corsProxyUrl,
      redirectUri: BAIDU_PAN_CONFIG.redirectUri,
      showSnackbar: showSnackbar,
      onFolderSelected: async (data) => {
        // 文件夹选择回调
        if (data.isOutput) {
          OutputFolderId = data.path;
          outputfolderName = data.name;
          await populateOutputFolder(OutputFolderId);
        } else {
          selectedFolderId = data.path;
          folderName = data.name;
          await populateInputFolder(selectedFolderId);
        }
        useOrNot = true;
      }
    });
    
    // 初始化API
    baiduPanManager.init();
    
    console.log('[BaiduPan] ✅ 管理器初始化完成');
    return true;
  }

  //----------- Helper functions -----------:
  function addRoomLatestTime(timestamp, li) {
    if (timestamp) {
      const dateObj = new Date(timestamp);
      const dateStr = formatDateYYYYMMDD(dateObj);
      const timeStr = dateObj.toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true,
      });
      const dateSpan = document.createElement('span');
      dateSpan.style.float = 'right';
      dateSpan.style.color = '#888';
      dateSpan.style.fontSize = '0.95em';
      dateSpan.textContent = `${dateStr}, ${timeStr}`;
      li.appendChild(dateSpan);
    }
  }

  //----------- display related -----------:

  //# Add message (v1)
  async function addMessage(
    content,
    isUser = false,
    timestamp = null,
    model,
    isImage = false,
    skipHistory = false,
    files = []
  ) {
    const message = document.createElement('div');
    message.classList.add('chatbot-message', isUser ? 'user' : 'bot');
    let innerHTML = null;
    if (!isUser && !isImage) {
      innerHTML = await getHTMLformat(content);
    }
    stopBotThinking();

    files = files || [];

    if (files.length > 0 && isUser) {
      const attachmentDiv = document.createElement('div');
      attachmentDiv.classList.add('chatbot-attachment');
      attachmentDiv.style.display = 'flex';
      attachmentDiv.style.flexWrap = 'wrap';
      attachmentDiv.style.gap = '10px';

      const promises = [];

      for (const file of files) {
        if (file.type.startsWith('image/')) {
          promises.push(renderImageMessage(attachmentDiv, file));
        } else {
          const iconSpan = document.createElement('span');
          iconSpan.textContent = getFileIcon(file.type);
          iconSpan.classList.add('chatbot-file-icon');
          const nameSpan = document.createElement('span');
          nameSpan.textContent = file.name || '';
          const fileDiv = document.createElement('div');
          fileDiv.appendChild(iconSpan);
          fileDiv.appendChild(nameSpan);
          attachmentDiv.appendChild(fileDiv);
        }
      }

      await Promise.all(promises);

      const textDiv = document.createElement('div');
      // Use htmlFormat if provided, else fall back to content as plain text

      if (!isUser) {
        textDiv.innerHTML = innerHTML;
      } else {
        textDiv.innerHTML = content;
      }

      textDiv.style.marginTop = '6px';
      message.appendChild(attachmentDiv);
      message.appendChild(textDiv);

      if (timestamp) {
        const date = new Date(timestamp);
        const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
        const dateString = formatDateYYYYMMDD(date);
        let info = `${timeString}, ${dateString}`;
        if (model) info += `, ${model}`;
        const timeDiv = document.createElement('div');
        timeDiv.classList.add('chatbot-message-time');
        timeDiv.textContent = info;
        message.appendChild(timeDiv);
      }

      messagesDiv.appendChild(message);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;

      if (!skipHistory) userHistory.push(content);
    } else {
      if (!isImage) {
        if (!isUser) {
          message.innerHTML = innerHTML;
        } else {
          message.innerHTML = content;
        }
      }

      const isErrorMsg = typeof content === 'string' && content.trim().startsWith('Sorry, an error occurred');

      if (isImage && !isUser && !isErrorMsg) {
        const img = document.createElement('img');
        img.src = `data:image/png;base64,${content}`;
        img.alt = 'Generated image';
        img.classList.add('chatbot-image');
        img.style.maxWidth = '100%';
        img.style.marginTop = '10px';
        message.appendChild(img);
      } else if (isImage) {
        message.textContent = 'Image generation failed. Please try again.';
      }

      if (timestamp) {
        const date = new Date(timestamp);
        const timeString = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
        const dateString = formatDateYYYYMMDD(date);
        let info = `${timeString}, ${dateString}`;
        if (model) info += `, ${model}`;
        const timeDiv = document.createElement('div');
        timeDiv.classList.add('chatbot-message-time');
        timeDiv.textContent = info;
        message.appendChild(timeDiv);
      }

      messagesDiv.appendChild(message);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;

      if (!isImage && !skipHistory) {
        if (!isUser) chatHistory.push(content);
        else userHistory.push(content);
      }
    }
  }

  //v14
  function renderImageMessage(attachmentDiv, file) {
    return new Promise((resolve, reject) => {
      const img = document.createElement('img');
      const reader = new FileReader();
      reader.onload = function (e) {
        img.src = e.target.result;
        img.alt = 'Attached image';
        img.classList.add('chatbot-attached-image');
        img.style.maxWidth = '30%';
        img.style.marginBottom = '10px';
        attachmentDiv.appendChild(img);
        resolve();
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  function reorderRoomList(currentRoomId) {
    const roomList = document.getElementById('room-list');
    const roomItems = Array.from(roomList.getElementsByClassName('room-item'));

    const currentRoomItem = roomItems.find((item) => item.getAttribute('data-room-id') === currentRoomId);
    if (!currentRoomItem) return;

    roomItems.forEach((item) => item.classList.remove('active'));

    // Preserve structure by re-adding name and delete button if needed
    const roomName = currentRoomItem.getAttribute('data-room-name');
    const nameSpan = currentRoomItem.querySelector('span') || document.createElement('span');
    if (!nameSpan.parentNode) {
      nameSpan.textContent = roomName;
      currentRoomItem.insertBefore(nameSpan, currentRoomItem.firstChild);
    }
    const deleteButton = currentRoomItem.querySelector('.delete-room-btn') || document.createElement('button');
    if (!deleteButton.parentNode) {
      deleteButton.textContent = '×';
      deleteButton.classList.add('delete-room-btn');
      deleteButton.setAttribute('data-room-id', currentRoomId);
      deleteButton.addEventListener('click', async (e) => {
        e.stopPropagation();
        await deleteRoom(currentRoomId);
      });
      currentRoomItem.appendChild(deleteButton);
    }

    roomList.prepend(currentRoomItem);
    currentRoomItem.classList.add('active');
  }

  function updateTimeOfChatRoom() {
    let now = new Date().toISOString();
    const roomItem = document.querySelector(`.room-item[data-room-id="${currentRoomId}"]`);
    if (roomItem) {
      // Remove only the timestamp span, not the name or delete button
      const oldSpan = roomItem.querySelector('span[style*="float: right"]');
      if (oldSpan) oldSpan.remove();
      addRoomLatestTime(now, roomItem);
    }
  }

  function updateEditSaveDirBtnVisibility() {
    if (directoryHandle) {
      editSaveDirBtn.style.display = 'inline-block';
    } else {
      editSaveDirBtn.style.display = 'none';
    }
  }

  //# Bots selector dropdown menu (v5)
  function populateBotSelector() {
    botSelector.innerHTML = '';
    const categories = {};

    // Add default option
    let defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Please select a bot';
    defaultOption.disabled = true;
    defaultOption.selected = true;
    botSelector.appendChild(defaultOption);

    botsCategories.forEach((c) => {
      category = c['page-list'];
      categories[category] = [];
      botsList.forEach((bot) => {
        if (bot[category] == 1) {
          categories[category].push(bot);
        }
      });
    });

    for (const category in categories) {
      const group = document.createElement('optgroup');
      group.label = category;

      categories[category].forEach((bot) => {
        const option = document.createElement('option');
        option.value = bot.name;
        const rates = currencies;
        const currencyChosen = currentCreditAccount.balance.currencyCode;
        const customerCurrencyRate = rates[currencyChosen];
        const botCurrencyRate = rates[bot.currency];
        const deduction = (bot.cost / (botCurrencyRate || 1)) * (customerCurrencyRate || 1);
        option.textContent = `${bot.name} (min: ${customRound(deduction, 3)} ${currencyChosen})`;

        if (currentBot && bot.id === currentBot.id) {
          option.selected = true;
        }

        group.appendChild(option);
      });
      botSelector.appendChild(group);
    }
  }

  //#  Storage selector dropdown menu (v7)
  //20250904: update + storage change
  
    function populateStorageSelectorMenuv2() {
    // Clear the existing options
    StorageModeSelector.innerHTML = ''; 
    // Add the 'none' option first and set it as selected
    const noneOption = document.createElement('option');
    noneOption.value = 'none';
    noneOption.textContent = storageModes.none;
    noneOption.selected = true; // Set 'none' as the default selected option
    StorageModeSelector.appendChild(noneOption);
    // Add the other storage modes
    for (const key in storageModes) {
        if (key !== 'none') { // Skip the 'none' option as it's already added
        const option = document.createElement('option');
        option.value = key;
        option.textContent = storageModes[key];
        StorageModeSelector.appendChild(option);
        }
    }
    }


  function populateSourceSelectorMenu() {
    SourceModeSelector.innerHTML = '';
    let defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select source mode';
    defaultOption.disabled = true;
    defaultOption.selected = true;
    SourceModeSelector.appendChild(defaultOption);

    for (const key in sourceModes) {
      const option = document.createElement('option');
      option.value = key;
      option.textContent = sourceModes[key];
      SourceModeSelector.appendChild(option);
    }
  }

  function populateCreditAccountSelector() {
    creditAccountSelector.innerHTML = '';
    creditAccounts.forEach((account, index) => {
      const option = document.createElement('option');
      option.value = index;
      option.textContent = `${account.balance.currencyCode}`;
      creditAccountSelector.appendChild(option);
    });
    if (creditAccounts.length > 0) {
      creditAccountSelector.value = 0;
    }
  }

  //#Start and stop thinking animation:
  //v5
  function startBotThinking() {
    const dots = ['.\u00A0\u00A0', '..\u00A0', '...'];
    let i = 0;

    stopBotThinking();

    thinkingMessageDiv = document.createElement('div');
    thinkingMessageDiv.classList.add('chatbot-message', 'bot');
    thinkingMessageDiv.textContent = dots[0];
    messagesDiv.appendChild(thinkingMessageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;

    thinkingInterval = setInterval(() => {
      i = (i + 1) % dots.length;
      thinkingMessageDiv.textContent = dots[i];
    }, 500);
  }

  //v5
  function stopBotThinking() {
    if (thinkingInterval) {
      clearInterval(thinkingInterval);
      thinkingInterval = null;
    }
    if (thinkingMessageDiv) {
      messagesDiv.removeChild(thinkingMessageDiv);
      thinkingMessageDiv = null;
    }
  }
  
  function getUrlParameter(name) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name);
  }

  document.addEventListener('DOMContentLoaded', function () {
    //----------- Initial setup -----------:
    
    //# HTML elements control
    //v1
    CUSTOMER_ID = document.getElementById('shopify-customer').getAttribute('data-customer-id');
    userInput = document.querySelector('.chatbot-input-field');
    sendButton = document.querySelector('.chatbot-send');
    tokensDisplay = document.getElementById('customer-tokens');
    messagesDiv = document.querySelector('.chatbot-messages');
    //v3
    roomList = document.getElementById('room-list');
    createRoomBtn = document.getElementById('create-room');
    //v5
    botSelector = document.getElementById('bot-selector');
    //v7
    saveStatus = document.getElementById('save-status');
    editSaveDirBtn = document.getElementById('edit-save-dir-btn');
    StorageModeSelector = document.getElementById('storage-mode-selector');
    SourceModeSelector = document.getElementById('source-mode-selector');
    //v11
    lcChooseFolderBtn = document.getElementById('choose-local-input');
    lcChooseOutputBtn = document.getElementById('choose-local-output');
    dbChooseFolderBtn = document.getElementById('choose-folder');
    dbChooseOutputBtn = document.getElementById('choose-db-output');
    gdChooseFolderBtn = document.getElementById('choose-gdrive');
    gdChooseOutputBtn = document.getElementById('choose-output');
    odChooseFolderBtn = document.getElementById('choose-od-input');
    odChooseOutputBtn = document.getElementById('choose-od-output');
    
    // 🆕 新增：百度网盘按钮元素获取和管理器初始化
    bdChooseFolderBtn = document.getElementById('choose-bd-input');
    bdChooseOutputBtn = document.getElementById('choose-bd-output');
    
    // 初始化百度网盘管理器
    initBaiduPanManager();
    
    // 绑定UI元素到管理器
    if (baiduPanManager) {
      baiduPanManager.bindElements({
        inputButton: bdChooseFolderBtn,
        outputButton: bdChooseOutputBtn,
        inputDisplay: document.getElementById('selected-input-folder'),
        outputDisplay: document.getElementById('selected-output-folder')
      });
    }
    
    //v15
    attachBtn = document.getElementById('attach-button');
    fileInput = document.createElement('input');
    //v16
    selectedFileName = document.getElementById('selected-file-name');
    //v18
    creditAccountSelector = document.getElementById('credit-account-selector');

    const snackbar = document.getElementById('snackbar');
    const snackbarMessage = document.getElementById('snackbar-message');
    const snackbarClose = document.getElementById('snackbar-close');

    folderPopup = document.getElementById('folder-popup');
    closePopupBtn = document.querySelector('.close-popup');
    useFolderBtn = document.getElementById('use-folder');
    cancelFolderBtn = document.getElementById('cancel-folder');
    folderStatsDiv = document.getElementById('folder-stats');
    viewFolderBtn = document.getElementById('view-folder-btn');
    inputFolder = document.getElementById('input-folder');
    outputFolder = document.getElementById('output-folder');

    // Hide premium version buttons initially
    lcChooseFolderBtn.style.display = 'none';
    lcChooseOutputBtn.style.display = 'none';
    dbChooseFolderBtn.style.display = 'none';
    dbChooseOutputBtn.style.display = 'none';
    gdChooseFolderBtn.style.display = 'none';
    gdChooseOutputBtn.style.display = 'none';
    odChooseFolderBtn.style.display = 'none';
    odChooseOutputBtn.style.display = 'none';
    
    // 🆕 新增：隐藏百度网盘按钮
    if (baiduPanManager) {
      baiduPanManager.toggleButtons(false);
    }

    fileInput.type = 'file';
    fileInput.multiple = true;
    fileInput.style.display = 'none';
    document.body.appendChild(fileInput);

    console.log('CUSTOMER_ID: ', CUSTOMER_ID);
    sendLogToBackend(`CUSTOMER_ID: ${CUSTOMER_ID}`);

    // 🆕 新增：检查百度网盘OAuth回调
    console.log('[Init] Checking Baidu Pan OAuth callback...');
    if (baiduPanManager) {
      baiduPanManager.handleCallback();
    }

    //# Initial functions run
    //v1
    async function fetchCreditAccounts() {
      await fetchTokens();
      populateCreditAccountSelector();
    }

    fetchCreditAccounts();
    //v3
    fetchRooms();
    //v7
    //20250904: update + storage change
    
    populateStorageSelectorMenuv2();

    populateSourceSelectorMenu();

    async function getBots() {
      await getCategoriesList();
      let botsList = getBotsData();
      console.log('categoriesList: ', botsCategories);
    }

    getBots();
    if (storeId !== 'data-entry-test') {
        SourceModeSelector.style.display = 'none';
        document.getElementById('async-mode-checkbox').parentElement.style.display = 'none';
    } else {
        SourceModeSelector.style.display = 'block';
        // v3: hide async option and set as default when storeid is data-entry-test
        
        document.getElementById('async-mode-checkbox').parentElement.style.display = 'none';
        asyncMode = true; // <-- ADD THIS LINE

    }
    fetchCurrencies();

    //------------------------------------------------:

    // Main function to delete a room based on storage mode

    //----------- Event listener functions -----------:
    // Generalized snackbar function
    function showSnackbar(message, color) {
      snackbarMessage.innerHTML = message;
      snackbar.style.backgroundColor = color;
      snackbar.style.display = 'block';
      setTimeout(() => {
        snackbar.style.display = 'none';
      }, 4000);
    }

    function toggleAttachButton(hide = true) {
      const attachButton = document.getElementById('attach-button');
      if (hide) {
        attachButton.style.display = 'none';
      } else {
        attachButton.style.display = 'block';
      }
    }

    async function handleStorageModeChange(mode) {
        storageMode = mode;

        // Reset UI elements for storage modes
        attachBtn.style.display = 'none';
        if (sourceMode === null){
            document.getElementById('folder-inputs').style.display = 'none';
            document.getElementById('selected-input-folder').textContent = "";
            document.getElementById('selected-output-folder').textContent = "";
        }

        // Handle basic storage modes
        const storageModeHandlers = {
            'local': async () => {
            if (!directoryHandle) {
                attachBtn.style.display = 'block';
                await selectLocalDir();
            }
            },
            'none': () => {
            if (sourceMode === null){
                attachBtn.style.display = 'block';
            }
            },
        };

        if (storageModeHandlers[storageMode]) {
            await storageModeHandlers[storageMode]();
        }

        // Common operations
        console.log("Fetching rooms...");
        await fetchRooms();
        console.log('Storage mode changed to:', storageMode);
        sendLogToBackend(`Storage mode changed to: ${storageMode}`);
    }

    async function handleSourceModeChange(mode) {
        sourceMode = mode;

        // Reset UI elements for source modes
        dbChooseFolderBtn.style.display = 'none';
        dbChooseOutputBtn.style.display = 'none';
        gdChooseFolderBtn.style.display = 'none';
        gdChooseOutputBtn.style.display = 'none';
        lcChooseFolderBtn.style.display = 'none';
        lcChooseOutputBtn.style.display = 'none';
        odChooseFolderBtn.style.display = 'none';
        odChooseOutputBtn.style.display = 'none';
        // 🆕 新增：重置百度网盘按钮
        if (baiduPanManager) {
          baiduPanManager.toggleButtons(false);
        }
        
        attachBtn.style.display = 'none';
        document.getElementById('folder-inputs').style.display = 'none';
        document.getElementById('selected-input-folder').textContent = "";
        document.getElementById('selected-output-folder').textContent = "";

        // Handle premium source modes
        const sourceModeHandlers = {
            'premium': () => {
            dbChooseFolderBtn.style.display = 'block';
            dbChooseOutputBtn.style.display = 'block';
            document.getElementById('folder-inputs').style.display = 'block';
            window.location.href = `https://us-central1-lt-bot-setup-v2.cloudfunctions.net/dropboxapiv4direct_aib_test2/auth/dropbox?customerId=${CUSTOMER_ID}`;
            },
            'premiumd': () => {
            gdChooseFolderBtn.style.display = 'block';
            gdChooseOutputBtn.style.display = 'block';
            document.getElementById('folder-inputs').style.display = 'block';
            const currentUrl = window.location.href;
            // const authUrl = `https://us-central1-lt-bot-setup-v2.cloudfunctions.net/gdriveapiv7direct_aib_test2/auth/google?customerId=${CUSTOMER_ID}&referrer=${encodeURIComponent(currentUrl)}`;
            const authUrl = `https://us-central1-lt-bot-setup-v2.cloudfunctions.net/gdriveapiv7direct_aib_test2/auth/google?customerId=${CUSTOMER_ID}`;
            window.location.href = authUrl;
            },
            'premiuml': () => {
            lcChooseFolderBtn.style.display = 'block';
            lcChooseOutputBtn.style.display = 'block';
            document.getElementById('folder-inputs').style.display = 'block';
            },
            'premiumod': () => {
            odChooseFolderBtn.style.display = 'block';
            odChooseOutputBtn.style.display = 'block';
            document.getElementById('folder-inputs').style.display = 'block';
            window.location.href = `https://us-central1-gdrive-functions.cloudfunctions.net/onedriveapiv1direct/auth/onedrive?customerId=${CUSTOMER_ID}`;
            },
            // 🆕 新增：百度网盘处理逻辑
            'premiumbdpan': () => {
            console.log('[BaiduPan] Source mode selected');
            
            // 显示百度网盘按钮
            if (baiduPanManager) {
              baiduPanManager.toggleButtons(true);
            }
            document.getElementById('folder-inputs').style.display = 'block';
            
            // 检查是否已授权
            if (baiduPanManager && !baiduPanManager.isAuthenticated()) {
                console.log('[BaiduPan] Not authenticated, redirecting to auth...');
                showSnackbar('正在跳转到百度网盘授权页面...', 'rgb(0, 167, 44)');
                setTimeout(() => {
                  const authUrl = baiduPanManager.api.getAuthUrl(BAIDU_PAN_CONFIG.redirectUri);
                  window.location.href = authUrl;
                }, 1000);
            } else {
                console.log('[BaiduPan] Already authenticated');
                showSnackbar('百度网盘已授权', 'rgb(0, 167, 44)');
            }
            }
        };

        if (sourceModeHandlers[sourceMode]) {
            await sourceModeHandlers[sourceMode]();
        }

        // Common operations
        console.log("Fetching rooms...");
        await fetchRooms();
        console.log('Source mode changed to:', sourceMode);
        sendLogToBackend(`Source mode changed to: ${sourceMode}`);
    }

    // Event listener for snackbar close button
    snackbarClose.addEventListener('click', function () {
      snackbar.style.display = 'none';
    });

    //# When messages are sent (v1)
    sendButton.addEventListener('click', async function () {
      if (!CUSTOMER_ID || CUSTOMER_ID === 'null' || CUSTOMER_ID === 'undefined' || CUSTOMER_ID === '') {
        showSnackbar('Please login', 'rgb(255, 133, 32)');
        return;
      }
      if (currentBot == null) {
        showSnackbar('Please select a bot', 'rgb(16, 187, 255)');
        return;
      }
      console.log(storageMode, sourceMode);
      //20250904: update + storage change=
      

      if (sourceMode == null && Number(DataEntry) === 1){
        showSnackbar('You can also choose one of our source modes for ease', 'rgb(0, 167, 44)');
      }
      let credit = parseFloat(tokensDisplay.textContent);
      const currencyChosen = currentCreditAccount.balance.currencyCode;
      const rates = currencies;
      const customerCurrencyRate = rates[currencyChosen];
      const botCurrencyRate = rates[currentBot.currency];
      const minBotCost = (currentBot.cost / botCurrencyRate) * customerCurrencyRate;
      if (credit < minBotCost) {
        showSnackbar('Not enough credits', 'rgb(255, 100, 100)');
        return;
      }
      const message = userInput.value.trim();
      if (!message) {
        return;
      }

      sendButton.disabled = true;
      sendButton.classList.add('disabled');

      let now = new Date().toISOString();
      let text = userInput.value;

      sendBtnLogic(currentCreditAccount);
    });

    //# When enter button is pressed (send button trigger) (v1)
    userInput.addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        sendButton.click();
      }
    });

    //# Room selection and creation (v3)
    roomList.addEventListener('click', function (e) {
      const roomItem = e.target.closest('.room-item');
      if (roomItem) {
        document.querySelector('.room-item.active').classList.remove('active');
        roomItem.classList.add('active');
        currentRoomId = roomItem.getAttribute('data-room-id');
        currentRoom = roomItem.getAttribute('data-room-name');
        loadChatHistory(currentRoomId);
        // Ensure name and delete button are present
        const roomName = roomItem.getAttribute('data-room-name');
        let nameSpan = roomItem.querySelector('span');
        if (!nameSpan) {
          nameSpan = document.createElement('span');
          nameSpan.textContent = roomName;
          roomItem.insertBefore(nameSpan, roomItem.firstChild);
        }
        let deleteButton = roomItem.querySelector('.delete-room-btn');
        if (!deleteButton) {
          deleteButton = document.createElement('button');
          deleteButton.textContent = '×';
          deleteButton.classList.add('delete-room-btn');
          deleteButton.setAttribute('data-room-id', currentRoomId);
          deleteButton.addEventListener('click', async (e) => {
            e.stopPropagation();
            await deleteRoom(currentRoomId);
          });
          roomItem.appendChild(deleteButton);
        }
      }
    });

    //# Create new room (v3)
    createRoomBtn.addEventListener('click', async function () {
      const roomName = prompt('Enter new room name (e.g., customer ID or custom name):');
      if (!roomName) return;
      const roomId = await getUniqueId();
      currentRoomId = roomId;
      currentRoom = roomName;

      const li = document.createElement('li');
      li.classList.add('room-item');

      const nameSpan = document.createElement('span');
      nameSpan.textContent = roomName;
      li.appendChild(nameSpan);

      const deleteButton = document.createElement('button');
      deleteButton.textContent = '×';
      deleteButton.classList.add('delete-room-btn');
      deleteButton.setAttribute('data-room-id', roomId);
      deleteButton.addEventListener('click', async (e) => {
        e.stopPropagation();
        await deleteRoom(roomId);
      });
      li.appendChild(deleteButton);

      li.setAttribute('data-room-id', roomId);
      li.setAttribute('data-room-name', roomName);
      roomList.appendChild(li);
      reorderRoomList(currentRoomId);
      loadChatHistory(currentRoomId);
    });

    botSelector.addEventListener('change', function () {
      
      useOrNot = false;
      viewFolderBtn.disabled = false;
      viewFolderBtn.innerHTML = 'Confirm';
      viewFolderBtn.style.backgroundColor = '#8d0033'; 
      viewFolderBtn.style.cursor = 'pointer';
      const selectedModel = this.value;
      let selectedCategory = null;

      const selectedOption = this.options[this.selectedIndex];
      if (selectedOption) {
        const optGroup = selectedOption.closest('optgroup');
        if (optGroup) {
          selectedCategory = optGroup.label;
        }
      }

      botsList.forEach((bot) => {
        if (bot.name === selectedModel) {
          currentBot = bot;
          currentBot.category = selectedCategory;
        }
      });
     
      category = botsCategories.filter((c) => c['page-list'] == selectedCategory)[0];
      
      if (category['blockFileUploadFlag'] == 1) {
        toggleAttachButton(true);
      } else {
        toggleAttachButton(false);
      }
      // 🔧 修改：添加百度网盘判断
      // ❌ 删除（注释掉）：if (sourceMode === 'premium' || sourceMode === 'premiumd' || sourceMode === 'premiuml') {
      if (sourceMode === 'premium' || sourceMode === 'premiumd' || sourceMode === 'premiuml' || sourceMode === 'premiumbdpan') {
        attachBtn.style.display = 'none';
      } else {
        attachBtn.style.display = 'block';
      }
      console.log(`Selected bot: ${selectedModel}, Category: ${selectedCategory}`);
    });
  
    //# choose storing method (v7)
  // Event listeners for both selectors
    StorageModeSelector.addEventListener('change', async function () {
        //20250904: update + storage change=
        storageMode = this.value; 

        await handleStorageModeChange(this.value);
    });

    SourceModeSelector.addEventListener('change', async function () {
        await handleSourceModeChange(this.value);
    });

    editSaveDirBtn.addEventListener('click', async function () {
      await selectLocalDir();
      fetchRooms();
    });

    dbChooseFolderBtn.addEventListener('click', async function () {
      Dropbox.choose({
        success: async function (files) {
          selectedFolderId = files[0].id;
          selectedFolderPath = files[0].name;
          folderName = selectedFolderPath
          document.getElementById('selected-input-folder').textContent = `Selected Input Folder: ${folderName}`;
          sessionStorage.setItem('selectedDropboxFolder', selectedFolderPath);
          console.log(JSON.stringify(files));
          console.log('selectedFolderPath: ', selectedFolderPath);
          sendLogToBackend(JSON.stringify(files));
          sendLogToBackend(`selectedFolderPath: ${selectedFolderPath}`);
          useOrNot = true;
          await populateInputFolder(selectedFolderId);
        },
        cancel: function () {
          console.log('User canceled folder selection');
          sendLogToBackend('User canceled folder selection');
        },
        multiselect: false,
        folderselect: true,
      });
    });

    dbChooseOutputBtn.addEventListener('click', async function () {
      Dropbox.choose({
        success: async function (files) {
          OutputFolderId = files[0].id;
          const OutputFolderName = files[0].name;
          outputfolderName = OutputFolderName;
          document.getElementById('selected-output-folder').textContent = `Selected Output Folder: ${OutputFolderName}`;
          sessionStorage.setItem('selectedDropboxOutputFolder', OutputFolderId);
          console.log(JSON.stringify(files));
          console.log('OutputFolderId: ', OutputFolderId);
          sendLogToBackend(JSON.stringify(files));
          sendLogToBackend(`OutputFolderId: ${OutputFolderId}`);
          useOrNot = true;
          await populateOutputFolder(OutputFolderId);
        },
        cancel: function () {
          console.log('User canceled folder selection');
          sendLogToBackend('User canceled folder selection');
        },
        multiselect: false,
        folderselect: true,
      });
    });
 
    gdChooseFolderBtn.addEventListener('click', () => {
      showGoogleDriveInputPicker();
    });
    
    gdChooseOutputBtn.addEventListener('click', () => {
      showGoogleDriveOutputPicker();
    });

    // v3: to fix onedrive folder picker
    odChooseFolderBtn.addEventListener('click', async function () {
        await showOneDrivePicker(false);
    });
    odChooseOutputBtn.addEventListener('click', async function () {
        await showOneDrivePicker(true);
    });
    
    // 🆕 新增：百度网盘文件夹选择按钮事件监听（已由 BaiduPanManager.bindElements 处理）
    // 按钮事件已由管理器自动绑定，无需手动添加监听器
    
    


    lcChooseFolderBtn.addEventListener('click', async () => {
      try {
        attachedFiles = [];
        lcdirectoryHandle = await window.showDirectoryPicker();
        document.getElementById('selected-input-folder').textContent = `Selected Input Folder: ${lcdirectoryHandle.name}`;
        for await (const entry of lcdirectoryHandle.values()) {
          if (entry.kind === 'file') {
            const file = await entry.getFile();
            attachedFiles.push(file);
          }
        }
        selectedFolderId = lcdirectoryHandle.name;
        useOrNot = true;
        populateInputFolder(selectedFolderId);
        console.log("Done selecting local directory:", lcdirectoryHandle.name);
      } catch (error) {
        console.error("Error selecting directory:", error);
        document.getElementById('selected-input-folder').textContent = "No folder selected";
      }
    });

    lcChooseOutputBtn.addEventListener('click', async() => {
      try {
        const outputDirectoryHandle = await window.showDirectoryPicker();
        document.getElementById('selected-output-folder').textContent = `Selected Output Folder: ${outputDirectoryHandle.name}`;
        OutputFolderId = outputDirectoryHandle.name;
        outputfolderName = OutputFolderId;
        useOrNot = true;
        await populateOutputFolder(OutputFolderId);
      } catch (error) {
        console.error("Error selecting output directory:", error);
        document.getElementById('selected-output-folder').textContent = "No folder selected";
      }
    })
    //v14
    attachBtn.addEventListener('click', function () {
    if (sourceMode === 'premium') {
        showSnackbar('File attachments disabled in Premium Dropbox mode', 'rgb(255, 100, 100)');
        return; // Exit the function early
    }
    if (sourceMode === 'premiumd'){
      showSnackbar('File attachments disabled in Premium Google Drive mode', 'rgb(255, 100, 100)');
      return;
    }
    if (sourceMode === 'premiuml'){
      showSnackbar('File attachments disabled in Premium Local mode', 'rgb(255, 100, 100)');
      return;
    }
    // 🆕 新增：百度网盘模式下禁用附件
    if (sourceMode === 'premiumbdpan'){
      showSnackbar('File attachments disabled in Premium Baidu Pan mode', 'rgb(255, 100, 100)');
      return;
    }
    fileInput.click();
    });

    //v14
    fileInput.addEventListener('change', function () {
      if (fileInput.files.length > 0) {
        attachedFiles = Array.from(fileInput.files);
        attachBtn.textContent = '✔';
        attachedFiles.forEach((file) => {
          if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function (e) {
              file.dataUrl = e.target.result;
            };
            reader.readAsDataURL(file);
          } else {
            file.dataUrl = null;
          }
        });
        selectedFileName.textContent = attachedFiles.map((file) => file.name).join(', ');
      } else {
        attachedFiles = [];
        attachBtn.textContent = '📎';
        selectedFileName.textContent = '';
      }
      console.log(attachedFiles);
    });

    creditAccountSelector.addEventListener('change', function () {
      const selectedIndex = this.value;
      currentCreditAccount = creditAccounts[selectedIndex];
      tokensDisplay.textContent = `${currentCreditAccount.balance.amount}`;
      populateBotSelector();
    });

    useFolderBtn.addEventListener('click', function() {
      showSnackbar('Folder selected successfully', 'rgb(0, 167, 44)');
      useOrNot = true;
      folderPopup.style.display = 'none';
      viewFolderBtn.innerHTML = '✓ Confirmed';
      viewFolderBtn.style.backgroundColor = '#4CAF50';
      viewFolderBtn.style.cursor = 'default';
      // viewFolderBtn.disabled = true;
    });

    cancelFolderBtn.addEventListener('click', function() {
      folderPopup.style.display = 'none';
      
    });

    closePopupBtn.addEventListener('click', function() {
      folderPopup.style.display = 'none';
    });

    // Show/hide view button based on input
    inputFolder.addEventListener('input', function(e) {
      viewFolderBtn.style.display = e.target.value.trim() ? 'block' : 'none';
      if (e.target.value.trim()) {
        viewFolderBtn.disabled = false;
        viewFolderBtn.innerHTML = 'Confirm';
        viewFolderBtn.style.backgroundColor = '#8d0033'; // Original color
        viewFolderBtn.style.cursor = 'pointer';
      }
    });

    // Close popup when clicking outside
    window.addEventListener('click', function(event) {
      if (event.target === folderPopup) {
        folderPopup.style.display = 'none';
      }
    });

    viewFolderBtn.addEventListener('click', async function() {
      const folderId = inputFolder.value.trim();
      if (outputFolder.value.trim() === '') {
        outputfolderName = folderName;
      }
      if (!currentBot) {
        showSnackbar('Please select a model', 'rgb(255, 100, 100)');
        return;
      }
      try {
        // Show loading state
        folderStatsDiv.innerHTML = '<p>Loading folder contents...</p>';
        folderPopup.style.display = 'block';
        useFolderBtn.disabled = true;
        
        let stats;
        
        // Handle different storage modes
        if (sourceMode === 'premium') {
          // Dropbox API mode
          const response = await fetch('https://us-central1-gdrive-functions.cloudfunctions.net/getFolderInfo/folder-stats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': "Z9Y8X7W6"
            },
            body: JSON.stringify({
              baseUrl: "https://us-central1-lt-bot-setup-v2.cloudfunctions.net/dropboxapiv4direct_aib_test2",
              userId: CUSTOMER_ID,
              folderId: folderId,
              sourceMode
            })
          });
          stats = await response.json();
        } 
        else if (sourceMode === 'premiumd') {
          // Google Drive API mode
          const response = await fetch('https://us-central1-gdrive-functions.cloudfunctions.net/getFolderInfo/folder-stats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': "Z9Y8X7W6"
            },
            body: JSON.stringify({
              baseUrl: "https://us-central1-lt-bot-setup-v2.cloudfunctions.net/gdriveapiv7direct_aib_test2",
              userId: CUSTOMER_ID,
              folderId: folderId,
              sourceMode
            })
          });
          stats = await response.json();
        } else if (sourceMode === 'premiumod'){
           const response = await fetch('https://us-central1-gdrive-functions.cloudfunctions.net/getFolderInfo/folder-stats', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': "Z9Y8X7W6"
            },
            body: JSON.stringify({
              baseUrl: "https://us-central1-gdrive-functions.cloudfunctions.net/onedriveapiv1direct",
              userId: CUSTOMER_ID,
              folderId: folderId,
              sourceMode
            })
          });
          stats = await response.json();

        } 
        // 🆕 新增：百度网盘API调用
        else if (sourceMode === 'premiumbdpan') {
          console.log('[BaiduPan] Fetching folder stats for:', folderId);
          
          if (!baiduPanManager || !baiduPanManager.isAuthenticated()) {
            throw new Error('百度网盘未授权，请先完成授权');
          }
          
          try {
            stats = await baiduPanManager.getFolderStats(folderId);
            console.log('[BaiduPan] Folder stats retrieved:', stats);
          } catch (error) {
            console.error('[BaiduPan] Error getting folder stats:', error);
            throw new Error('获取百度网盘文件夹信息失败: ' + error.message);
          }
        }
        else {
          try {
            const files = [];
            let totalSizeBytes = 0;
            for await (const entry of lcdirectoryHandle.values()) {
              if (entry.kind === 'file') {
                const file = await entry.getFile();
                files.push({
                  name: entry.name,
                  size: formatFileSize(file.size),
                  sizeBytes: file.size
                });
                totalSizeBytes += file.size;
              }
            }
            
            stats = {
              totalFiles: files.length,
              totalSize: formatFileSize(totalSizeBytes),
              files: files,
              calculatedCost: calculateCost(totalSizeBytes)
            };

            folderName = lcdirectoryHandle.name || 'Local Folder';
          } catch (error) {
            throw new Error('Local folder access denied or failed: ' + error.message);
          }
        }

        // Process the response data (same for all modes)
        const totalSizeMB = parseFloat(stats.totalSize.replace(' MB', '')) || 
                          (stats.totalSizeBytes ? stats.totalSizeBytes / (1024 * 1024) : 0);
        
        let hasLargeFiles = false;
        let errorMessage = '';

        for (const file of stats.files) {
          const fileSizeMB = parseFloat(file.size.replace('MB', '')) || 
                            (file.sizeBytes ? file.sizeBytes / (1024 * 1024) : 0);
          if (fileSizeMB > 25) {
            hasLargeFiles = true;
            break;
          }
        }
        if (sourceMode === 'premiuml' && stats.totalFiles > 1){
          errorMessage += `Only one file is allowed in Premium Local mode.`;
        }
        if (totalSizeMB > 50) {
          errorMessage += `Total folder size (${totalSizeMB.toFixed(2)}MB) exceeds 50MB limit. `;
        }
        if (hasLargeFiles) {
          errorMessage += `Folder contains files larger than 25MB.`;
        }
        const resp_cc = await fetch('https://us-central1-gdrive-functions.cloudfunctions.net/firestore_v1/query', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'x-api-key': langya_secret_key },
            body: JSON.stringify({
                collectionName: 'data-entry-test'
            })
        })
        const dat_cc = await resp_cc.json();
        console.log(currentBot?.Model);
        const entry = dat_cc.results.find(item => item["Model"] === currentBot?.Model);
        const calculatedCost = entry ? entry["AI Credit"] : 0.0;
        console.log('calculatedCost: ', calculatedCost);
        console.log('currency chosen: ', currentCreditAccount.balance.currencyCode);
        const price = await calculateTokenConsumption(0, 0, currentCreditAccount.balance.currencyCode, calculatedCost);
        // Display the folder stats
        let html = `
          <p><strong>Input Folder Name:</strong> ${folderName}</p>
          <p><strong>Output Folder Name:</strong> ${outputfolderName}</p>
          <p><strong>Model Name:</strong> ${currentBot?.Model || 'Unselected'}</p>
          <p><strong>Total Files:</strong> ${stats.totalFiles}</p>
          <p><strong>Total Size (max. 50 MB):</strong> ${stats.totalSize}</p>
          <p><strong>Total Cost:</strong> HKD ${parseFloat(price).toFixed(3) * stats.totalFiles}</p>`;
    
        if (errorMessage) {
          html += `<p class="error-message"><strong>Error:</strong> ${errorMessage}</p>`;
          useFolderBtn.disabled = true;
        } else {
          useFolderBtn.disabled = false;
        }

        html += `<p><strong>Files:</strong></p><ul>`;
        for (const file of stats.files) {
          const fileSizeMB = parseFloat(file.size.replace(' MB', '')) || (file.sizeBytes ? file.sizeBytes / (1024 * 1024) : 0);
          const fileClass = fileSizeMB > 25 ? 'class="large-file"' : '';
          html += `<li ${fileClass}>${file.name}: ${file.size}</li>`;
        }
        html += `</ul>`;
        
        folderStatsDiv.innerHTML = html;
        // 🔧 修改：添加百度网盘判断
        // ❌ 删除（注释掉）：attachBtn.style.display = (sourceMode === 'premium' || sourceMode === 'premiumd' || sourceMode === 'premiuml') ? 'none' : 'block';
        attachBtn.style.display = (sourceMode === 'premium' || sourceMode === 'premiumd' || sourceMode === 'premiuml' || sourceMode === 'premiumbdpan') ? 'none' : 'block';
        
      } catch (error) {
        console.error('Error fetching folder stats:', error);
        folderStatsDiv.innerHTML = `
          <p class="error">Error loading folder: ${error.message}</p>
          <p>Please check the folder and try again.</p>`;
        useFolderBtn.disabled = true;
      }
    });

    document.getElementById('async-mode-checkbox').addEventListener('change', function () {
      asyncMode = this.checked;
      console.log('Async mode:', asyncMode);
    });
    
    const urlStorageMode = getUrlParameter('sourceMode');
    if (urlStorageMode === 'premium') {
      dbChooseFolderBtn.style.display = 'block';
      dbChooseOutputBtn.style.display = 'block';
      sourceMode = 'premium';
      storageMode = null;
      SourceModeSelector.value = 'premium';
      attachBtn.style.display = 'none';
      document.getElementById('folder-inputs').style.display = 'block';
    }
    if (urlStorageMode === 'premiumd') {
      gdChooseFolderBtn.style.display = 'block';
      gdChooseOutputBtn.style.display = 'block';
      sourceMode = 'premiumd';
      storageMode = null;
      SourceModeSelector.value = 'premiumd';
      attachBtn.style.display = 'none';
      document.getElementById('folder-inputs').style.display = 'block';
    }
    if (urlStorageMode === 'premiumod'){
        odChooseFolderBtn.style.display = 'block';
        odChooseOutputBtn.style.display = 'block';
        sourceMode = 'premiumod';
        storageMode = null;
        SourceModeSelector.value = 'premiumod';
        attachBtn.style.display = 'none';
        document.getElementById('folder-inputs').style.display = 'block';
    }
    // 🆕 新增：百度网盘URL参数处理
    if (urlStorageMode === 'premiumbdpan'){
        console.log('[BaiduPan] URL parameter detected, setting up UI...');
        if (baiduPanManager) {
          baiduPanManager.toggleButtons(true);
        }
        sourceMode = 'premiumbdpan';
        storageMode = null;
        SourceModeSelector.value = 'premiumbdpan';
        attachBtn.style.display = 'none';
        document.getElementById('folder-inputs').style.display = 'block';
        
        // 检查是否是OAuth回调
        if (baiduPanManager) {
          baiduPanManager.handleCallback();
        }
    }

  });
</script>


  </div>
</div>


</section>
    </main>

    <!-- BEGIN sections: footer-group -->
<div id="shopify-section-sections--17671187988549__footer" class="shopify-section shopify-section-group-footer-group">
<link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/section-footer.css?v=60318643098753476351751857555" rel="stylesheet" type="text/css" media="all" />
<link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-newsletter.css?v=4727253280200485261751857553" rel="stylesheet" type="text/css" media="all" />
<link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-list-menu.css?v=151968516119678728991751857553" rel="stylesheet" type="text/css" media="all" />
<link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-list-payment.css?v=69253961410771838501751857553" rel="stylesheet" type="text/css" media="all" />
<link href="//aib-test2.myshopify.com/cdn/shop/t/2/assets/component-list-social.css?v=35792976012981934991751857553" rel="stylesheet" type="text/css" media="all" />
<style data-shopify>.footer {
    margin-top: 0px;
  }

  .section-sections--17671187988549__footer-padding {
    padding-top: 27px;
    padding-bottom: 27px;
  }

  @media screen and (min-width: 750px) {
    .footer {
      margin-top: 0px;
    }

    .section-sections--17671187988549__footer-padding {
      padding-top: 36px;
      padding-bottom: 36px;
    }
  }</style><footer class="footer color-scheme-1 gradient section-sections--17671187988549__footer-padding"><div class="footer__content-top page-width"><div
          class="footer-block--newsletter scroll-trigger animate--slide-in"
          
            data-cascade
          
        ><div class="footer-block__newsletter"><h2 class="footer-block__heading inline-richtext">Subscribe to our emails</h2><form method="post" action="/contact#ContactFooter" id="ContactFooter" accept-charset="UTF-8" class="footer__newsletter newsletter-form"><input type="hidden" name="form_type" value="customer" /><input type="hidden" name="utf8" value="✓" /><input type="hidden" name="contact[tags]" value="newsletter">
                <div class="newsletter-form__field-wrapper">
                  <div class="field">
                    <input
                      id="NewsletterForm--sections--17671187988549__footer"
                      type="email"
                      name="contact[email]"
                      class="field__input"
                      value=""
                      aria-required="true"
                      autocorrect="off"
                      autocapitalize="off"
                      autocomplete="email"
                      
                      placeholder="Email"
                      required
                    >
                    <label class="field__label" for="NewsletterForm--sections--17671187988549__footer">
                      Email
                    </label>
                    <button
                      type="submit"
                      class="newsletter-form__button field__button"
                      name="commit"
                      id="Subscribe"
                      aria-label="Subscribe"
                    >
                      <span class="svg-wrapper"><svg xmlns="http://www.w3.org/2000/svg" fill="none" class="icon icon-arrow" viewBox="0 0 14 10"><path fill="currentColor" fill-rule="evenodd" d="M8.537.808a.5.5 0 0 1 .817-.162l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 1 1-.708-.708L11.793 5.5H1a.5.5 0 0 1 0-1h10.793L8.646 1.354a.5.5 0 0 1-.109-.546" clip-rule="evenodd"/></svg>
</span>
                    </button>
                  </div></div></form></div></div>
      </div><div
    class="footer__content-bottom scroll-trigger animate--slide-in"
    
      data-cascade
    
  >
    <div class="footer__content-bottom-wrapper page-width">
      <div class="footer__column footer__localization isolate"></div>
      <div class="footer__column footer__column--info"><div class="footer__payment">
            <span class="visually-hidden">Payment methods</span>
            <ul class="list list-payment" role="list"></ul>
          </div></div>
    </div>
    <div class="footer__content-bottom-wrapper page-width">
      <div class="footer__copyright caption">
        <small class="copyright__content"
          >&copy; 2025, <a href="/" title="">aib-test2</a></small>
        <small class="copyright__content"><a target="_blank" rel="nofollow" href="https://www.shopify.com?utm_campaign=poweredby&amp;utm_medium=shopify&amp;utm_source=onlinestore">Powered by Shopify</a></small><ul class="policies list-unstyled"><li>
                  <small class="copyright__content"
                    ><a href="/policies/privacy-policy">Privacy policy</a></small
                  >
                </li></ul></div>
    </div>
  </div>
</footer>


</div>
<!-- END sections: footer-group -->

    <ul hidden>
      <li id="a11y-refresh-page-message">Choosing a selection results in a full page refresh.</li>
      <li id="a11y-new-window-message">Opens in a new window.</li>
    </ul>

    <script>
      window.shopUrl = 'https://aib-test2.myshopify.com';
      window.routes = {
        cart_add_url: '/cart/add',
        cart_change_url: '/cart/change',
        cart_update_url: '/cart/update',
        cart_url: '/cart',
        predictive_search_url: '/search/suggest',
      };

      window.cartStrings = {
        error: `There was an error while updating your cart. Please try again.`,
        quantityError: `You can only add [quantity] of this item to your cart.`,
      };

      window.variantStrings = {
        addToCart: `Add to cart`,
        soldOut: `Sold out`,
        unavailable: `Unavailable`,
        unavailable_with_option: `[value] - Unavailable`,
      };

      window.quickOrderListStrings = {
        itemsAdded: `[quantity] items added`,
        itemAdded: `[quantity] item added`,
        itemsRemoved: `[quantity] items removed`,
        itemRemoved: `[quantity] item removed`,
        viewCart: `View cart`,
        each: `[money]/ea`,
        min_error: `This item has a minimum of [min]`,
        max_error: `This item has a maximum of [max]`,
        step_error: `You can only add this item in increments of [step]`,
      };

      window.accessibilityStrings = {
        imageAvailable: `Image [index] is now available in gallery view`,
        shareSuccess: `Link copied to clipboard`,
        pauseSlideshow: `Pause slideshow`,
        playSlideshow: `Play slideshow`,
        recipientFormExpanded: `Gift card recipient form expanded`,
        recipientFormCollapsed: `Gift card recipient form collapsed`,
        countrySelectorSearchCount: `[count] countries/regions found`,
      };
    </script><script src="//aib-test2.myshopify.com/cdn/shop/t/2/assets/predictive-search.js?v=57209189334897115771751857555" defer="defer"></script></body>
</html>
